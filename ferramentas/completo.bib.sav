% Encoding: UTF-8

@InProceedings{Knoche:2016:SRP:2851553.2892039,
  author    = {Knoche, Holger},
  title     = {Sustaining Runtime Performance While Incrementally Modernizing Transactional Monolithic Software Towards Microservices},
  booktitle = {Proceedings of the 7th ACM/SPEC on International Conference on Performance Engineering},
  year      = {2016},
  series    = {ICPE '16},
  pages     = {121--124},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Microservices are a promising target architecture for the modernization of monolithic software. However, breaking up a monolith into services can have a severe impact on performance, especially transactions. Therefore, careful planning of such modernizations with respect to performance is required. This is particularly true for incremental modernizations, which release partially modernized states of the application into production. In this paper, we present a simulation-based approach for sustaining runtime performance during incremental modernizations towards Microservices.},
  acmid     = {2892039},
  doi       = {10.1145/2851553.2892039},
  groups    = {Performance, Database},
  isbn      = {978-1-4503-4080-9},
  keywords  = {microservices, software modernization, rank5},
  location  = {Delft, The Netherlands},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/2851553.2892039},
}

@InProceedings{Scarborough:2016:CSM:2949550.2949655,
  author    = {Scarborough, Walter and Arnold, Carrie and Dahan, Maytal},
  title     = {Case Study: Microservice Evolution and Software Lifecycle of the XSEDE User Portal API},
  booktitle = {Proceedings of the XSEDE16 Conference on Diversity, Big Data, and Science at Scale},
  year      = {2016},
  series    = {XSEDE16},
  pages     = {47:1--47:5},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {The XSEDE User Portal (XUP) [1] is a web interface providing a set of user specific XSEDE services and documentation to a diverse audience. The XUP architecture started out depending on monolithic services provided by large Java libraries, but continues to evolve to use an application programming interface (API) [2] powered by a set of microservices [3]. The goal is to have the XUP API provide development and deployment environments that are agile, sustainable, and capable of handling feature changes. In making this transition, we have developed guidelines for API services that balance complexity and reuse needs with flexibility requirements. In doing so, we have also created our own set of best practices on how to convert to using microservices. In this paper we will use the XSEDE User Portal API development as a case study to explain our rationale, approach, and experiences in working with microservices in a real production environment to provide better and more reliable science services for end users.},
  acmid     = {2949655},
  articleno = {47},
  doi       = {10.1145/2949550.2949655},
  groups    = {Experiencia},
  isbn      = {978-1-4503-4755-6},
  keywords  = {API, Microservices, XSEDE User Portal, rank3},
  location  = {Miami, USA},
  numpages  = {5},
  url       = {http://doi.acm.org/10.1145/2949550.2949655},
}

@InProceedings{Krause:2016:MTA:2959689.2960082,
  title     = {Microservices: Theory and Application},
  booktitle = {Applicative 2016},
  year      = {2016},
  series    = {Applicative 2016},
  pages     = {--},
  address   = {New York, NY, USA},
  publisher = {ACM},
  note      = {Speaker-Krause, Lucas},
  abstract  = {Microservices is a new trend in software development, this talk is divided into the theory of Microservices explaining the why and what of Microservices. The second part will dive into specific code building and refactoring a software application into a Microservices Architecture including refactoring, re-design, testing and security.},
  acmid     = {2960082},
  doi       = {10.1145/2959689.2960082},
  groups    = {Desenvolvimento},
  isbn      = {978-1-4503-4464-7},
  keywords  = {rank5},
  location  = {New York, NY, USA},
  url       = {http://doi.acm.org/10.1145/2959689.2960082},
}

@Article{Killalea:2016:HDM:2956641.2956643,
  author     = {Killalea, Tom},
  title      = {The Hidden Dividends of Microservices},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {10:25--10:34},
  month      = may,
  issn       = {1542-7730},
  abstract   = {Microservices aren't for every company, and the journey isn't easy.},
  acmid      = {2956643},
  address    = {New York, NY, USA},
  articleno  = {10},
  doi        = {10.1145/2956641.2956643},
  groups     = {Experiencia},
  issue_date = {May-June 2016},
  keywords   = {rank5},
  numpages   = {10},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2956643},
}

@InProceedings{Hasselbring:2016:MSK:2851553.2858659,
  author    = {Hasselbring, Wilhelm},
  title     = {Microservices for Scalability: Keynote Talk Abstract},
  booktitle = {Proceedings of the 7th ACM/SPEC on International Conference on Performance Engineering},
  year      = {2016},
  series    = {ICPE '16},
  pages     = {133--134},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Microservice architectures provide small services that may be deployed and scaled independently of each other, and may employ different middleware stacks for their implementation. Microservice architectures emphasize transaction-less coordination between services, with explicit acceptance of eventual consistency. Polyglott persistence in this context means that the individual microservices may employ multiple data storage technologies. Microservice architectures are "cloud native" allowing for automated and rapid elasticity. Fault-tolerance mechanisms achieve that failures of individual mircroservices do not affect other services thanks to container isolation. Since services can fail at any time, it is important to be able to detect the failures quickly and, if possible, automatically restore services. Essential for success in such a setting is advanced monitoring. In this keynote, I discuss how mircoservices support scalability for both, runtime performance and development performance, via polyglott persistence, eventual consistency, loose coupling, open source frameworks, and continuous monitoring for elastic capacity management.},
  acmid     = {2858659},
  doi       = {10.1145/2851553.2858659},
  groups    = {Desenvolvimento, Performance, Cloud, Experiencia, Database},
  isbn      = {978-1-4503-4080-9},
  keywords  = {microservices, monitoring, scalability, rank5},
  location  = {Delft, The Netherlands},
  numpages  = {2},
  url       = {http://doi.acm.org/10.1145/2851553.2858659},
}

@Article{2016:2956641,
  journal           = {Queue},
  year              = {2016},
  volume            = {14},
  number            = {3},
  issn              = {1542-7730},
  address           = {New York, NY, USA},
  issue_date        = {May-June 2016},
  issue_description = {Microservices},
  key               = {{$\!\!$}},
  keywords          = {rank5},
  publisher         = {ACM},
}

@InProceedings{Florio:2015:DSL:2786805.2803192,
  author    = {Florio, Luca},
  title     = {Decentralized Self-adaptation in Large-scale Distributed Systems},
  booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
  year      = {2015},
  series    = {ESEC/FSE 2015},
  pages     = {1022--1025},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = { The evolution of technology is leading to a world where computational systems are made of a huge number of components spread over a logical network: these components operate in a highly dynamic and unpredictable environment, joining or leaving the system and creating connections between them at runtime. This scenario poses new challenges to software engineers that have to design and implement such complex systems. We want to address this problem, designing and developing an infrastructure, GRU, that uses self-adaptive decentralized techniques to manage large-scale distributed systems. GRU will help developers to focus on the functional part of their application instead of the needed self-adaptive infrastructure. We aim to evaluate our project with concrete case studies, providing evidence on the validity of our approach, and with the feedback provided by developers that will test our system. We believe this approach can contribute to fill the gap between the theoretical study of self-adaptive systems and their application in a production context. },
  acmid     = {2803192},
  doi       = {10.1145/2786805.2803192},
  groups    = {Deploy},
  isbn      = {978-1-4503-3675-8},
  keywords  = {Decentralized, Docker, Microservices, Self-Adaptive, rank5},
  location  = {Bergamo, Italy},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/2786805.2803192},
}

@InProceedings{Arsenault:2016:SEH:2959689.2959794,
  title     = {Service Explosion - How Hootsuite Manages Its Ever Growing Microservices Landscape},
  booktitle = {Applicative 2016},
  year      = {2016},
  series    = {Applicative 2016},
  pages     = {--},
  address   = {New York, NY, USA},
  publisher = {ACM},
  note      = {Speaker-Arsenault, Adam},
  abstract  = {During our SOA transition at Hootsuite, we have noticed that visibility into our service relationships, dependencies and status is paramount to keeping our team, our build pipeline and application running smoothly. Id like to share with you an API we baked into our SOA architecture that enables us to explore our applications service dependency graph in real time.},
  acmid     = {2959794},
  doi       = {10.1145/2959689.2959794},
  groups    = {Ferramenta, Desenvolvimento, Experiencia, Deploy},
  isbn      = {978-1-4503-4464-7},
  keywords  = {rank5},
  location  = {New York, NY, USA},
  url       = {http://doi.acm.org/10.1145/2959689.2959794},
}

@Article{Singh:2016:CLC:2956641.2965647,
  author     = {Singh, Satnam},
  title      = {Cluster-level Logging of Containers with Containers},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {30:83--30:106},
  month      = may,
  issn       = {1542-7730},
  abstract   = {Logging Challenges of Container-Based Cloud Deployments},
  acmid      = {2965647},
  address    = {New York, NY, USA},
  articleno  = {30},
  doi        = {10.1145/2956641.2965647},
  groups     = {Cloud, Deploy},
  issue_date = {May-June 2016},
  keywords   = {rank4},
  numpages   = {24},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2965647},
}

@Article{Killalea:2016:HDM:2975594.2948985,
  author     = {Killalea, Tom},
  title      = {The Hidden Dividends of Microservices},
  journal    = {Commun. ACM},
  year       = {2016},
  volume     = {59},
  number     = {8},
  pages      = {42--45},
  month      = jul,
  issn       = {0001-0782},
  abstract   = {Microservices aren't for every company, and the journey isn't easy.},
  acmid      = {2948985},
  address    = {New York, NY, USA},
  doi        = {10.1145/2948985},
  groups     = {Desenvolvimento, Experiencia},
  issue_date = {August 2016},
  keywords   = {rank5},
  numpages   = {4},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2948985},
}

@Article{Matsudaira:2016:BSA:2956641.2974011,
  author     = {Matsudaira, Kate},
  title      = {Bad Software Architecture is a People Problem},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {60:13--60:18},
  month      = jun,
  issn       = {1542-7730},
  abstract   = {When people don't work well together they make bad decisions.},
  acmid      = {2974011},
  address    = {New York, NY, USA},
  articleno  = {60},
  doi        = {10.1145/2956641.2974011},
  groups     = {DevOps},
  issue_date = {May-June 2016},
  keywords   = {rank3},
  numpages   = {6},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2974011},
}

@Article{Degenbaev:2016:IGS:2956641.2977741,
  author     = {Degenbaev, Ulan and Eisinger, Jochen and Ernst, Manfred and McIlroy, Ross and Payer, Hannes},
  title      = {Idle-Time Garbage-Collection Scheduling},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {70:35--70:52},
  month      = jun,
  issn       = {1542-7730},
  abstract   = {Taking advantage of idleness to reduce dropped frames and memory consumption},
  acmid      = {2977741},
  address    = {New York, NY, USA},
  articleno  = {70},
  doi        = {10.1145/2956641.2977741},
  groups     = {Performance},
  issue_date = {May-June 2016},
  keywords   = {rank1},
  numpages   = {18},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2977741},
}

@InProceedings{Toffetti:2015:ASM:2747470.2747474,
  author    = {Toffetti, Giovanni and Brunner, Sandro and Bl\"{o}chlinger, Martin and Dudouet, Florian and Edmonds, Andrew},
  title     = {An Architecture for Self-managing Microservices},
  booktitle = {Proceedings of the 1st International Workshop on Automated Incident Management in Cloud},
  year      = {2015},
  series    = {AIMC '15},
  pages     = {19--24},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Running applications in the cloud efficiently requires much more than deploying software in virtual machines. Cloud applications have to be <i>continuously managed</i>: 1) to adjust their resources to the incoming load and 2) to face transient failures replicating and restarting components to provide resiliency on unreliable infrastructure. Continuous management <i>monitors</i> application and infrastructural metrics to provide automated and responsive reactions to failures (<i>health management</i>) and changing environmental conditions (<i>auto-scaling</i>) minimizing human intervention. In the current practice, management functionalities are provided as infrastructural or third party services. In both cases they are external to the application deployment. We claim that this approach has intrinsic limits, namely that separating management functionalities from the application prevents them from naturally scaling with the application and requires additional management code and human intervention. Moreover, using infrastructure provider services for management functionalities results in vendor lock-in effectively preventing cloud applications to adapt and run on the most effective cloud for the job. In this position paper we propose a novel architecture that enables scalable and resilient self-management of microservices applications on cloud.},
  acmid     = {2747474},
  doi       = {10.1145/2747470.2747474},
  groups    = {Cloud, Deploy},
  isbn      = {978-1-4503-3476-1},
  keywords  = {rank5},
  location  = {Bordeaux, France},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2747470.2747474},
}

@InProceedings{BenHadjYahia:2016:TSS:3007646.3007655,
  author    = {Ben Hadj Yahia, Elyas and Gonzalez-Herrera, Inti and Bayle, Anthony and Bromberg, Y{\'e}rom-David and R{\'e}veill\`{e}re, Laurent},
  title     = {Towards Scalable Service Composition},
  booktitle = {Proceedings of the Industrial Track of the 17th International Middleware Conference},
  year      = {2016},
  series    = {Middleware Industry '16},
  pages     = {3:1--3:6},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Distributed applications are evolving at a frantic pace, critically relying on integrating altogether a plethora of composable value-added services to offer a host of new functionalities. In previous work, we have introduced a language-based approach to raise the level of abstraction required to express an orchestration of services. Our prototype implementation has proved to be efficient when running on a single machine. In this paper, we report our experience in turning this prototype implementation into a commercial product, supporting horizontal scaling across a cluster of nodes. We perform a series of experiments to show that our approach overcomes API rate limit rules of third-party services and scales the number of executed composite services linearly with the number of nodes of the cluster. We show that our approach outperforms traditional off-the-shelf tools and techniques, such as the ones provided by Docker Swarm.},
  acmid     = {3007655},
  articleno = {3},
  doi       = {10.1145/3007646.3007655},
  groups    = {Deploy, Performance, Ferramenta, Experiencia},
  isbn      = {978-1-4503-4664-1},
  keywords  = {Distributed systems, Microservices, Scalability, Service orchestration, Web composition, rank5},
  location  = {Trento, Italy},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/3007646.3007655},
}

@InProceedings{Cardozo:2016:ESS:2986012.2986016,
  author    = {Cardozo, Nicol\'{a}s},
  title     = {Emergent Software Services},
  booktitle = {Proceedings of the 2016 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  year      = {2016},
  series    = {Onward! 2016},
  pages     = {15--28},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = { Services are normally composed following a structured model, or based on a particular goal that needs to be fulfilled. Such model is problematic for pervasive environments, since service components deployed in the environment are unknown beforehand. As a result, services may never execute due to the unavailability of one of the pre-specified components, or components missing to fulfill the service goal. This paper posits a new vision for service composition by inverting the control flow of service-oriented applications between users and the environment. Rather than having to request a particular service, services emerge from the environment based on interactions between available service components, and are pushed to be utilized by users. We present the architecture required to fulfill our vision in enabling service emergence in a pervasive environment. This vision architecture is realized by an initial prototype framework for software service emergence called Mordor. Early results of this vision are obtained from two examples demonstrating the feasibility of services emergence from previously unknown service components, and a case study demonstrating Mordor&#039;s usability in real world scenarios. },
  acmid     = {2986016},
  doi       = {10.1145/2986012.2986016},
  groups    = {Framework, Experiencia, Desenvolvimento},
  isbn      = {978-1-4503-4076-2},
  keywords  = {Dynamic service composition, Emergent services, Microservices, rank4},
  location  = {Amsterdam, Netherlands},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/2986012.2986016},
}

@InProceedings{Barboza:2016:HMN:3049877.3049933,
  author    = {Barboza, John and Mallick, Muntasir and Siu, Joran and Bajwa, Jaideep and Dawson, Michael},
  title     = {Hands-on: Microservices on NodeJS},
  booktitle = {Proceedings of the 26th Annual International Conference on Computer Science and Software Engineering},
  year      = {2016},
  series    = {CASCON '16},
  pages     = {342--343},
  address   = {Riverton, NJ, USA},
  publisher = {IBM Corp.},
  abstract  = {Node.js is a server-side JavaScript platform that has seen explosive growth in recent years. In its 5 years of existence, Node.js has leaped to being the third most-starred repository on GitHub, and is now one of the most popular frameworks for developing cloud, mobile and Internet-of-Things applications.},
  acmid     = {3049933},
  groups    = {Linguagem},
  keywords  = {rank4},
  location  = {Toronto, Ontario, Canada},
  numpages  = {2},
  url       = {http://dl.acm.org/citation.cfm?id=3049877.3049933},
}

@Article{Helland:2016:SSS:2956641.2983199,
  author     = {Helland, Pat},
  title      = {The Singular Success of SQL},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {80:5--80:12},
  month      = jun,
  issn       = {1542-7730},
  abstract   = {SQL has a brilliant future as a major figure in the pantheon of data representations.},
  acmid      = {2983199},
  address    = {New York, NY, USA},
  articleno  = {80},
  doi        = {10.1145/2956641.2983199},
  groups     = {Database},
  issue_date = {May-June 2016},
  keywords   = {rank1},
  numpages   = {8},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2983199},
}

@Article{Medeiros:2016:DCW:2956641.2971330,
  author     = {Medeiros, Andre},
  title      = {Dynamics of Change: Why Reactivity Matters},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {50:68--50:82},
  month      = may,
  issn       = {1542-7730},
  abstract   = {Tame the dynamics of change by centralizing each concern in its own module.},
  acmid      = {2971330},
  address    = {New York, NY, USA},
  articleno  = {50},
  doi        = {10.1145/2956641.2971330},
  issue_date = {May-June 2016},
  keywords   = {rank1},
  numpages   = {15},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2971330},
}

@Article{Neville-Neil:2016:CM:2956641.2962575,
  author     = {Neville-Neil, George},
  title      = {Chilling the Messenger},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {20:19--20:24},
  month      = may,
  issn       = {1542-7730},
  abstract   = {Keeping ego out of software-design review},
  acmid      = {2962575},
  address    = {New York, NY, USA},
  articleno  = {20},
  doi        = {10.1145/2956641.2962575},
  issue_date = {May-June 2016},
  keywords   = {rank1},
  numpages   = {6},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2962575},
}

@InProceedings{Schermann:2016:BSC:2988336.2988348,
  author    = {Schermann, Gerald and Sch\"{o}ni, Dominik and Leitner, Philipp and Gall, Harald C.},
  title     = {Bifrost: Supporting Continuous Deployment with Automated Enactment of Multi-Phase Live Testing Strategies},
  booktitle = {Proceedings of the 17th International Middleware Conference},
  year      = {2016},
  series    = {Middleware '16},
  pages     = {12:1--12:14},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Live testing is used in the context of continuous delivery and deployment to test changes or new features in the production environment. This includes canary releases, dark launches, A/B tests, and gradual rollouts. Oftentimes, multiple of these live testing practices need to be combined (e.g., running an A/B test after a dark launch). Manually administering such multi-phase live testing strategies is a daunting task for developers or release engineers. In this paper, we introduce a formal model for multi-phase live testing, and present Bifrost as a Node.js based prototype implementation that allows developers to define and automatically enact complex live testing strategies. We extensively evaluate the runtime behavior of Bifrost in three rollout scenarios of a microservice-based case study application, and conclude that the performance overhead of our prototype is at or below 8 ms for most scenarios. Further, we show that more than 100 parallel strategies can be enacted even on cheap public cloud instances.},
  acmid     = {2988348},
  articleno = {12},
  doi       = {10.1145/2988336.2988348},
  groups    = {Teste, Experiencia, Performance, Ferramenta},
  isbn      = {978-1-4503-4300-8},
  keywords  = {A/B Testing, Canary Releases, Continuous Deployment, Microservices, Release Engineering, rank4},
  location  = {Trento, Italy},
  numpages  = {14},
  url       = {http://doi.acm.org/10.1145/2988336.2988348},
}

@InProceedings{Dikaleh:2016:HBP:3049877.3049914,
  author    = {Dikaleh, Serjik and Moghal, Salman and Sheikh, Ozair and Felix, Chris and Mistry, Dharmesh},
  title     = {Hands-on: Build and Package a Highly Scalable Microservice Application Using Docker Containers},
  booktitle = {Proceedings of the 26th Annual International Conference on Computer Science and Software Engineering},
  year      = {2016},
  series    = {CASCON '16},
  pages     = {294--296},
  address   = {Riverton, NJ, USA},
  publisher = {IBM Corp.},
  abstract  = {Developing and running applications require a number of supporting runtimes and services. We all have been part of or know about the extensive amount of effort that goes into setting up development, test and production environments. There are different levels of dependency and concerns such as OS configuration, platform/runtime installations and ultimately deploying the application itself. Each task is performed by different teams, spanning the combined effort across multiple departments, which adds to the deployment time. There is also the challenge of recreating the same configuration throughout separate environments in a consistent manner, which means several hours of scripting effort across different systems.},
  acmid     = {3049914},
  groups    = {Deploy, DevOps},
  keywords  = {rank4},
  location  = {Toronto, Ontario, Canada},
  numpages  = {3},
  url       = {http://dl.acm.org/citation.cfm?id=3049877.3049914},
}

@InProceedings{Leitner:2016:MMD:2996890.2996901,
  author    = {Leitner, Philipp and Cito, J\"{u}rgen and St\"{o}ckli, Emanuel},
  title     = {Modelling and Managing Deployment Costs of Microservice-based Cloud Applications},
  booktitle = {Proceedings of the 9th International Conference on Utility and Cloud Computing},
  year      = {2016},
  series    = {UCC '16},
  pages     = {165--174},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {We present an approach to model the deployment costs, including compute and IO costs, of Microservice-based applications deployed to a public cloud. Our model, which we dubbed <i>CostHat</i>, supports both, Microservices deployed on traditional IaaS or PaaS clouds, and services that make use of novel cloud programming paradigms, such as AWS Lambda. <i>CostHat</i> is based on a network model, and allows for what-if and cost sensitivity analysis. Further, we have used this model to implement tooling that warns cloud developers directly in the Integrated Development Environment (IDE) about certain classes of potentially costly code changes. We illustrate our work based on a case study, and evaluate the <i>CostHat</i> model using a standalone Python implementation. We show that, once instantiated, cost calculation in <i>CostHat</i> is computationally inexpensive on standard hardware (below 1 ms even for applications consisting of thousand services and endpoints). This enables its use in real-time for developer tooling which continually re-evaluates the costs of an application in the background, while the developer is working on the code.},
  acmid     = {2996901},
  doi       = {10.1145/2996890.2996901},
  groups    = {Cloud, Deploy, Experiencia, Ferramenta},
  isbn      = {978-1-4503-4616-0},
  keywords  = {rank4},
  location  = {Shanghai, China},
  numpages  = {10},
  url       = {http://doi.acm.org/10.1145/2996890.2996901},
}

@InProceedings{Prasad:2017:AOA:3021460.3021466,
  author    = {Prasad, Gollapudi VRJ Sai and Chimalakonda, Sridhar and Choppella, Venaktesh and Reddy, Y. Raghu},
  title     = {An Aspect Oriented Approach for Renarrating Web Content},
  booktitle = {Proceedings of the 10th Innovations in Software Engineering Conference},
  year      = {2017},
  series    = {ISEC '17},
  pages     = {56--65},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {The ability to modify the existing published web pages is what we are calling Renarration of the web. Such a mechanism is useful for improving accessibility and personalization of the content currently on the web. There are many techniques in place for enabling both Web Accessibility and Web Personalization. In this paper we propose a novel approach: an Aspects inspired design of renarration. Aspects have traditionally been applied to programming. Here we reinterpret concepts like Join Points, Point-cuts and Advices and apply them to web documents. To validate our approach, we designed a framework called Rennaration Studio that is built using microservices based architecture pattern and implemented using Python's flask platform. We demonstrate the feasibility of our proposal by renarrating different Aspects (text, language, phonetics) of two specific web documents.},
  acmid     = {3021466},
  doi       = {10.1145/3021460.3021466},
  groups    = {Framework},
  isbn      = {978-1-4503-4856-0},
  keywords  = {Annotation, Aspects for documents, Microservices for Annotation, Re-narration, Structured Web Documents, rank1},
  location  = {Jaipur, India},
  numpages  = {10},
  url       = {http://doi.acm.org/10.1145/3021460.3021466},
}

@InProceedings{Renz:2016:UAT:2883851.2883876,
  author    = {Renz, Jan and Hoffmann, Daniel and Staubitz, Thomas and Meinel, Christoph},
  title     = {Using A/B Testing in MOOC Environments},
  booktitle = {Proceedings of the Sixth International Conference on Learning Analytics \& Knowledge},
  year      = {2016},
  series    = {LAK '16},
  pages     = {304--313},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {In recent years, Massive Open Online Courses (MOOCs) have become a phenomenon offering the possibility to teach thousands of participants simultaneously. In the same time the platforms used to deliver these courses are still in their fledgling stages. While course content and didactics of those massive courses are the primary key factors for the success of courses, still a smart platform may increase or decrease the learners experience and his learning outcome. The paper at hand proposes the usage of an A/B testing framework that is able to be used within an micro-service architecture to validate hypotheses about how learners use the platform and to enable data-driven decisions about new features and settings. To evaluate this framework three new features (Onboarding Tour, Reminder Mails and a Pinboard Digest) have been identified based on a user survey. They have been implemented and introduced on two large MOOC platforms and their influence on the learners behavior have been measured. Finally this paper proposes a data driven decision workflow for the introduction of new features and settings on e-learning platforms.},
  acmid     = {2883876},
  doi       = {10.1145/2883851.2883876},
  groups    = {Teste},
  isbn      = {978-1-4503-4190-5},
  keywords  = {A/B testing, MOOC, controlled online tests, e-learning, microservice, rank1},
  location  = {Edinburgh, United Kingdom},
  numpages  = {10},
  url       = {http://doi.acm.org/10.1145/2883851.2883876},
}

@InProceedings{Marru:2015:AAL:2753524.2753529,
  author    = {Marru, Suresh and Pierce, Marlon and Pamidighantam, Sudhakar and Wimalasena, Chathuri},
  title     = {Apache Airavata As a Laboratory: Architecture and Case Study for Component-Based Gateway Middleware},
  booktitle = {Proceedings of the 1st Workshop on The Science of Cyberinfrastructure: Research, Experience, Applications and Models},
  year      = {2015},
  series    = {SCREAM '15},
  pages     = {19--26},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Science gateways are more than user interfaces to computational grids and clouds. Gateways are middleware in their own right, providing flexible, lightweight federations of heterogenous collections of computing resources (such as campus clusters, supercomputers, computational clouds), all of which remain challenges for many alternative middleware approaches. Gateways also are notable for providing science application-centric interfaces to computing resources rather than resource-centric views. An important challenge for science gateway research is to generalize specific science gateway strategies, defining a reference architecture that emcompasses major gateway capabilities while enabling implementation flexibility. Such a reference architecture should also enable "platform as a service" approaches that provide hosted versions of common gateway capabilities. In this paper, we summarize the Apache Airavata software system as a candidate reference architecture for science gateways. We propose the use of a component-based architecture to encompass major gateway capabilities (such as metadata management, meta-scheduling, execution management, and messaging). We examine the messaging system component in this abstract architecture in detail and describe its re-implementation and validation using third party messaging system software to replace a custom-built messaging system. Besides the operational validation of this specific component, we infer a preliminary validation of the overall architecture. The flexibility of component implementations within an overall architecture is essential as it allows gateway middleware to be the subject of distributed computing research for its own sake while also ensuring that we don't get locked into less than optimal implementations for gateway operations.},
  acmid     = {2753529},
  doi       = {10.1145/2753524.2753529},
  groups    = {Ferramenta, Comunicacao},
  isbn      = {978-1-4503-3566-9},
  keywords  = {apache airavata, distributed systems, evolutionary architecture, microservice architecture, science gateways, rank4},
  location  = {Portland, Oregon, USA},
  numpages  = {8},
  url       = {http://doi.acm.org/10.1145/2753524.2753529},
}

@InProceedings{Strecker:2016:BBC:2882879.2882887,
  author    = {Strecker, Florian and Gniza, Reinhard and Hollosy, Thomas and Schmatzer, Florian},
  title     = {Business-Actors As Base Components of Complex and Distributed Software Applications},
  booktitle = {Proceedings of the 8th International Conference on Subject-oriented Business Process Management},
  year      = {2016},
  series    = {S-BPM '16},
  pages     = {9:1--9:8},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Subject-oriented Business Process Management (S-BPM) is an emerging approach focusing on adjusted interaction and individual behavior of stakeholders in business operation. Unfortunately, current implementations & tools lead to issues in most industry-related S-BPM-projects. This contribution reveals how the concept of Business-Actors reduces S-BPM to it's underlying core and enhances it at the same time in some fields. Thus, Business-Actors are a method and technology being able to overcome problems of classical S-BPM-approaches.},
  acmid     = {2882887},
  articleno = {9},
  doi       = {10.1145/2882879.2882887},
  isbn      = {978-1-4503-4071-7},
  keywords  = {Business-Actors, Complexity, Distributed Software Applications, Microservices, PASS, Subject-oriented BPM, rank1},
  location  = {Erlangen, Germany},
  numpages  = {8},
  url       = {http://doi.acm.org/10.1145/2882879.2882887},
}

@Article{Bailis:2016:RPD:2956641.2967618,
  author     = {Bailis, Peter and Fournier, Camille and Arulraj, Joy and Pavlo, Andy},
  title      = {Research for Practice: Distributed Consensus and Implications of NVM on Database Management Systems},
  journal    = {Queue},
  year       = {2016},
  volume     = {14},
  number     = {3},
  pages      = {40:53--40:67},
  month      = may,
  issn       = {1542-7730},
  abstract   = {Expert-curated Guides to the Best of CS Research},
  acmid      = {2967618},
  address    = {New York, NY, USA},
  articleno  = {40},
  doi        = {10.1145/2956641.2967618},
  groups     = {Database},
  issue_date = {May-June 2016},
  keywords   = {rank1},
  numpages   = {15},
  publisher  = {ACM},
  url        = {http://doi.acm.org/10.1145/2956641.2967618},
}

@InProceedings{Kwan:2016:MMS:3049877.3049915,
  author    = {Kwan, Anthony and Jacobsen, Hans-Arno and Chan, Allen and Samoojh, Suzette},
  title     = {Microservices in the Modern Software World},
  booktitle = {Proceedings of the 26th Annual International Conference on Computer Science and Software Engineering},
  year      = {2016},
  series    = {CASCON '16},
  pages     = {297--299},
  address   = {Riverton, NJ, USA},
  publisher = {IBM Corp.},
  abstract  = {In today's fast-paced markets, frequently changing requirements are asking for innovative software architecture styles that accommodate application scalability, development flexibility and adaptivity to change. The most recent trends that have caught the attention of many organizations is the microservices architecture that supersedes "plain old services", service-oriented architectures (SOA) as well as the monolithic software architecture. Many organizations have begun transforming their traditional monolithic software systems, in which the entire application's functionality is bundled within a single process, to microservices architectures, where an application's functionality is broken into a small set of services, each running independently, often flexibly deployed in a virtualized environment. From the user's perspective, the interaction with the system remains the same, however, the microservices architecture style brings forth numerous benefits compared to a monolithically styled architecture.},
  acmid     = {3049915},
  keywords  = {rank4},
  location  = {Toronto, Ontario, Canada},
  numpages  = {3},
  url       = {http://dl.acm.org/citation.cfm?id=3049877.3049915},
}

@InProceedings{Gadea:2016:RAR:2904111.2904115,
  author    = {Gadea, Cristian and Trifan, Mircea and Ionescu, Dan and Ionescu, Bogdan},
  title     = {A Reference Architecture for Real-time Microservice API Consumption},
  booktitle = {Proceedings of the 3rd Workshop on CrossCloud Infrastructures \& Platforms},
  year      = {2016},
  series    = {CrossCloud '16},
  pages     = {2:1--2:6},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Modern web frameworks and backend-as-a-service providers make it possible for real-time updates to a NoSQL data model to be reflected in the user interfaces of multiple subscribing end-user applications. However, it remains difficult for users to dynamically discover and instantly make use of the data provided by the plethora of REST APIs in existence across various cloud providers today. This paper presents a reference architecture built on the idea of a scalable NoSQL database that allows multiple subscribers to receive instant notifications of database changes through the use of a "livequery". By keeping one WebSocket connection open between each client web browser and an Object Synchronization Server, this paper shows how data from multiple disparate REST APIs can be organized and transmitted to interested clients via the database. An example is given featuring a collaborative rich-text editor that makes use of a Named-Entity Recognition microservice.},
  acmid     = {2904115},
  articleno = {2},
  doi       = {10.1145/2904111.2904115},
  groups    = {Database},
  isbn      = {978-1-4503-4294-0},
  keywords  = {cloud computing, collaborative editing, docker, microservices, named entity recognition, real-time web, rank2},
  location  = {London, United Kingdom},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2904111.2904115},
}

@InProceedings{Hu:2016:TBC:2949550.2949652,
  author    = {Hu, Hao and Hong, Xingchen and Terstriep, Jeff and Liu, Yan Y. and Finn, Michael P. and Rush, Johnathan and Wendel, Jeffrey and Wang, Shaowen},
  title     = {TopoLens: Building a CyberGIS Community Data Service for Enhancing the Usability of High-resolution National Topographic Datasets},
  booktitle = {Proceedings of the XSEDE16 Conference on Diversity, Big Data, and Science at Scale},
  year      = {2016},
  series    = {XSEDE16},
  pages     = {39:1--39:8},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Geospatial data, often embedded with geographic references, are important to many application and science domains, and represent a major type of big data. The increased volume and diversity of geospatial data have caused serious usability issues for researchers in various scientific domains, which call for innovative cyberGIS solutions. To address these issues, this paper describes a cyberGIS community data service framework to facilitate geospatial big data access, processing, and sharing based on a hybrid supercomputer architecture. Through the collaboration between the CyberGIS Center at the University of Illinois at Urbana-Champaign (UIUC) and the U.S. Geological Survey (USGS), a community data service for accessing, customizing, and sharing digital elevation model (DEM) and its derived datasets from the 10-meter national elevation dataset, namely TopoLens, is created to demonstrate the workflow integration of geospatial big data sources, computation, analysis needed for customizing the original dataset for end user needs, and a friendly online user environment. TopoLens provides online access to precomputed and on-demand computed high-resolution elevation data by exploiting the ROGER supercomputer. The usability of this prototype service has been acknowledged in community evaluation.},
  acmid     = {2949652},
  articleno = {39},
  doi       = {10.1145/2949550.2949652},
  isbn      = {978-1-4503-4755-6},
  keywords  = {CyberGIS, data sharing, elevation data, geospatial big data, microservices, web-based gateway environment, rank1},
  location  = {Miami, USA},
  numpages  = {8},
  url       = {http://doi.acm.org/10.1145/2949550.2949652},
}

@InProceedings{Diaz:2016:CFC:2993412.3004852,
  author    = {D\'{\i}az, Jessica and P{\'e}rez, Jennifer and P{\'e}rez, Jorge and Garbajosa, Juan},
  title     = {Conceptualizing a Framework for Cyber-physical Systems of Systems Development and Deployment},
  booktitle = {Proccedings of the 10th European Conference on Software Architecture Workshops},
  year      = {2016},
  series    = {ECSAW '16},
  pages     = {1:1--1:7},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Cyber-physical systems (CPS) refer to the next generation of embedded ICT systems that are interconnected, collaborative and that provide users and businesses with a wide range of <i>smart</i> applications and services. Software in CPS applications ranges from small systems to large systems, aka. Systems of Systems (SoS), such as smart grids and cities. CPSoS require managing massive amounts of data, being aware of their emerging behavior, and scaling out to progressively evolve and add new systems. Cloud computing supports processing and storing massive amounts of data, hosting and delivering services, and configuring self-provisioned resources. Therefore, cloud computing is the natural candidate to solve CPSoS needs. However, the diversity of platforms and the low-level cloud programming models make difficult to find a common solution for the development and deployment of CPSoS. This paper presents the architectural foundations of a cloud-centric framework for automating the development and deployment of CPSoS service applications to converge towards a <i>common open service platform</i> for CPSoS applications. This framework relies on the well-known qualities of the <i>microservices</i> architecture style, the <i>autonomic computing</i> paradigm, and the <i>model-driven software development</i> approach. Its implementation and validation is on-going at two European and national projects.},
  acmid     = {3004852},
  articleno = {1},
  doi       = {10.1145/2993412.3004852},
  groups    = {Deploy, Cloud, Ferramenta},
  isbn      = {978-1-4503-4781-5},
  keywords  = {cloud computing, cyber-physical systems, microservices, model-driven development, software architecture, rank1},
  location  = {Copenhagen, Denmark},
  numpages  = {7},
  url       = {http://doi.acm.org/10.1145/2993412.3004852},
}

@InProceedings{Davies:2010:DUS:1967486.1967539,
  author    = {Davies, Marcin and Carrez, Fran\c{c}ois and Urdiales, Diego and Fensel, Anna and Narganes, Maribel and Danado, Jos{\'e}},
  title     = {Defining User-generated Services in a Semantically-enabled Mobile Platform},
  booktitle = {Proceedings of the 12th International Conference on Information Integration and Web-based Applications \&\#38; Services},
  year      = {2010},
  series    = {iiWAS '10},
  pages     = {333--340},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Mobile computing enables end-users not only to access and consume information on-the-go but also to act as service and content providers. With the right tools, end-users can create small services on their mobiles and share valuable and context-aware information with others. This work introduces a platform for end-user generated mobile services --- so-called microservices. As a key component we present a microservice description language for user-driven mobile service creation, powerful service discovery, and platform-independent service execution and rendering. The paper also gives insight into the visual authoring tool and the user feedback gathered in evaluations.},
  acmid     = {1967539},
  doi       = {10.1145/1967486.1967539},
  groups    = {Outra Area},
  isbn      = {978-1-4503-0421-4},
  keywords  = {end-user development, microservices, mobile services, semantic web services, user-centric service creation, rank1},
  location  = {Paris, France},
  numpages  = {8},
  url       = {http://doi.acm.org/10.1145/1967486.1967539},
}

@InProceedings{Bao:2016:MAI:3007203.3007215,
  author    = {Bao, Kaibin and Mauser, Ingo and Kochanneck, Sebastian and Xu, Huiwen and Schmeck, Hartmut},
  title     = {A Microservice Architecture for the Intranet of Things and Energy in Smart Buildings: Research Paper},
  booktitle = {Proceedings of the 1st International Workshop on Mashups of Things and APIs},
  year      = {2016},
  series    = {MOTA '16},
  pages     = {3:1--3:6},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {This paper presents challenges and issues in smart buildings and the Internet of Things (IoT), which we identified in years of research in real buildings. To tackle these challenges, a decentralized service-oriented architecture based on a message-oriented middleware has been implemented for the domain of smart buildings. It uses a network-transparent IoT message bus and provides the means for composing applications from auxiliary services, which facilitate device abstraction, protocol adaption, modularity, and maintainability. We demonstrate the flexibility of our architecture by describing how three distinct applications---privacy-enhancing energy data visualization, automated building energy management, and a generic user interface---can be integrated and operated simultaneously in our real smart building laboratory. We compare the advantages of our architecture to conventional ones and provide a best-practice solution for the Intranet of Things and Energy in smart buildings.},
  acmid     = {3007215},
  articleno = {3},
  doi       = {10.1145/3007203.3007215},
  groups    = {IoT},
  isbn      = {978-1-4503-4669-6},
  keywords  = {Architecture, Energy Informatics, Energy Management, Internet of Things, Middleware, Smart Building, Smart Energy, Visualization, rank2},
  location  = {Trento, Italy},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/3007203.3007215},
}

@InProceedings{Ollesch:2016:ASC:2933267.2933427,
  author    = {Ollesch, Julius},
  title     = {Adaptive Steering of Cyber-physical Systems with Atomic Complex Event Processing Services: Doctoral Symposium},
  booktitle = {Proceedings of the 10th ACM International Conference on Distributed and Event-based Systems},
  year      = {2016},
  series    = {DEBS '16},
  pages     = {402--405},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Given the advent of cyber-physical systems (CPS), event-based control paradigms such as complex event processing (CEP) are vital enablers for adaptive analytical control mechanisms. CPS are becoming a high-profile research topic as they are key to disruptive digital innovations such as autonomous driving, industrial internet, smart grid and ambient assisted living. However, organizational and technological scalability of today's CEP approaches is limited by their monolithic architectures. This leads to the research idea for atomic CEP entities and the hypothesis that a network of small event-based control services is better suited for CPS development and operation than current centralised approaches. In addition, the paper summarizes preliminary results of the presented doctoral work and outlines questions for future research as well as an evaluation plan.},
  acmid     = {2933427},
  doi       = {10.1145/2933267.2933427},
  isbn      = {978-1-4503-4021-2},
  keywords  = {architecture, complex event processing, cyber-physical systems, internet of things, microservices, real-time analytics, sensor networks, spatio-temporal processing, web services, rank1},
  location  = {Irvine, California},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/2933267.2933427},
}

@InProceedings{O'Connor:2016:EIS:2904354.2904368,
  author    = {O'Connor, Rory V. and Elger, Peter and Clarke, Paul M.},
  title     = {Exploring the Impact of Situational Context: A Case Study of a Software Development Process for a Microservices Architecture},
  booktitle = {Proceedings of the International Conference on Software and Systems Process},
  year      = {2016},
  series    = {ICSSP '16},
  pages     = {6--10},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Over the decades, a variety of software development processes have been proposed, each with their own advantages and disadvantages. It is however widely accepted that there is no single process that is perfectly suited to all settings, thus a software process should be molded to the needs of its situational context. In previous work, we have consolidated a substantial body of related research into an initial reference framework of the situational factors affecting the software development process. Practitioners can consult this framework in order to profile their context, a step necessary for effective software process decision making. In this paper, we report on the findings from a case study involving process discovery in a small but successful and growing software development firm. In this organization, which has a focus on continuous software evolution and delivery, we also applied the situational factors reference framework, finding that context is a complex and key informant for software process decisions. Studies of this type highlight the role of situational context in software process definition and evolution, and they raise awareness not just of the importance of situational context, but also of the complexity surrounding software process contexts, a complexity which may not be fully appreciated in all software development settings.},
  acmid     = {2904368},
  doi       = {10.1145/2904354.2904368},
  groups    = {Experiencia},
  isbn      = {978-1-4503-4188-2},
  keywords  = {Agile, lean, process selection, software development context, software development process, rank2},
  location  = {Austin, Texas},
  numpages  = {5},
  url       = {http://doi.acm.org/10.1145/2904354.2904368},
}

@InProceedings{Lin:2015:BYO:2886444.2886502,
  author    = {Lin, Angela},
  title     = {Building Your Own Language Runtime},
  booktitle = {Proceedings of the 25th Annual International Conference on Computer Science and Software Engineering},
  year      = {2015},
  series    = {CASCON '15},
  pages     = {296--298},
  address   = {Riverton, NJ, USA},
  publisher = {IBM Corp.},
  abstract  = {With the growing prominence of cloud computing, and the trend towards microservice architecture in our industry, there is a growing interest in using the best programming languages for the job. Programming has become more popular and accessible than ever, thanks to the development of languages that are tailored for certain application patterns. Established languages like Java, JavaScript, Ruby, Python, and PHP are heavily used, but new languages like Go, Rust, and Julia have also recently burst on the scene. The right choice of programming language can significantly accelerate the time to deploy an application, and improve an application's performance and security.},
  acmid     = {2886502},
  keywords  = {rank3},
  location  = {Markham, Canada},
  numpages  = {3},
  url       = {http://dl.acm.org/citation.cfm?id=2886444.2886502},
}

@InProceedings{Anwar:2015:ACM:2797022.2797039,
  author    = {Anwar, Ali and Sailer, Anca and Kochut, Andrzej and Butt, Ali R.},
  title     = {Anatomy of Cloud Monitoring and Metering: A Case Study and Open Problems},
  booktitle = {Proceedings of the 6th Asia-Pacific Workshop on Systems},
  year      = {2015},
  series    = {APSys '15},
  pages     = {6:1--6:7},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Microservices based architecture has recently gained traction among the cloud service providers in quest for a more scalable and reliable modular architecture. In parallel with this architectural choice, cloud providers are also facing the market demand for fine grained usage based prices. Both the management of the microservices complex dependencies, as well as the fine grained metering require the providers to track and log detailed monitoring data from their deployed cloud setups. Hence, on one hand, the providers need to record all such performance changes and events, while on the other hand, they are concerned with the additional cost associated with the resources required to store and process this ever increasing amount of collected data. In this paper, we analyze the design of the monitoring subsystem provided by open source cloud solutions, such as OpenStack. Specifically, we analyze how the monitoring data is collected by OpenStack and assess the characteristics of the data it collects, aiming to pinpoint the limitations of the current approach and suggest alternate solutions. Our preliminary evaluation of the proposed solutions reveals that it is possible to reduce the monitored data size by up to 80% and missed anomaly detection rate from 3% to as low as 0.05% to 0.1%.},
  acmid     = {2797039},
  articleno = {6},
  doi       = {10.1145/2797022.2797039},
  groups    = {Cloud, Experiencia, Performance},
  isbn      = {978-1-4503-3554-6},
  keywords  = {rank3},
  location  = {Tokyo, Japan},
  numpages  = {7},
  url       = {http://doi.acm.org/10.1145/2797022.2797039},
}

@InProceedings{Yan:2016:BCS:3007203.3007217,
  author    = {Yan, Mengting and Castro, Paul and Cheng, Perry and Ishakian, Vatche},
  title     = {Building a Chatbot with Serverless Computing},
  booktitle = {Proceedings of the 1st International Workshop on Mashups of Things and APIs},
  year      = {2016},
  series    = {MOTA '16},
  pages     = {5:1--5:4},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Chatbots are emerging as the newest platform used by millions of consumers worldwide due in part to the commoditization of natural language services, which provide provide developers with many building blocks to create chatbots inexpensively. However, it is still difficult to build and deploy chatbots. Developers need to handle the coordination of the cognitive services to build the chatbot interface, integrate the chatbot with external services, and worry about extensibility, scalability, and maintenance. In this work, we present the architecture and prototype of a chatbot using a serverless platform, where developers compose stateless functions together to perform useful actions. We describe our serverless architecture based on function sequences, and how we used these functions to coordinate the cognitive microservices in the Watson Developer Cloud to allow the chatbot to interact with external services. The serverless model improves the extensibility of our chatbot, which currently supports 6 abilities: location based weather reports, jokes, date, reminders, and a simple music tutor.},
  acmid     = {3007217},
  articleno = {5},
  doi       = {10.1145/3007203.3007217},
  isbn      = {978-1-4503-4669-6},
  keywords  = {FaaS, Serverless, bots, cloud computing, rank1},
  location  = {Trento, Italy},
  numpages  = {4},
  url       = {http://doi.acm.org/10.1145/3007203.3007217},
}

@InProceedings{Savelyev:2011:VGS:2068976.2068980,
  author    = {Savelyev, Alexander and Xu, Sen and Janowicz, Krzysztof and M\"{u}lligann, Christoph and Thatcher, Jim and Luo, Wei},
  title     = {Volunteered Geographic Services: Developing a Linked Data Driven Location-based Service},
  booktitle = {Proceedings of the 1st ACM SIGSPATIAL International Workshop on Spatial Semantics and Ontologies},
  year      = {2011},
  series    = {SSO '11},
  pages     = {25--31},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {The term Volunteered Geographic Information (VGI) describes various layperson-based, geo-collaboration projects to collect, maintain, and visualize information. VGI has been successfully utilized in scenarios such as emergency response and is also increasingly integrated into commercial products. Based on an analysis of existing projects and research, we propose to extend the idea of VGI by introducing Volunteered Geographic Services (VGS). Instead of contributing information, volunteers can request or offer microservices to their local community. We provide a flexible server framework that handles service requests and offers. We also implement a smartphone application developed using Google's Android platform. The server and mobile client are realized following the Linked Data paradigm and using Semantic Web technologies. In this paper, we discuss the idea behind VGS, motivate it using two scenarios, and explain the technical realization.},
  acmid     = {2068980},
  doi       = {10.1145/2068976.2068980},
  groups    = {Outra Area},
  isbn      = {978-1-4503-1039-0},
  keywords  = {linked data, location-based services, mobile computing, volunteered geographic information, rank1},
  location  = {Chicago, Illinois},
  numpages  = {7},
  url       = {http://doi.acm.org/10.1145/2068976.2068980},
}

@InProceedings{Wanigasekara:2015:SLB:2800835.2801655,
  author    = {Wanigasekara, Nirandika},
  title     = {A Semi Lazy Bandit Approach for Intelligent Service Discovery in IoT Applications},
  booktitle = {Adjunct Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2015 ACM International Symposium on Wearable Computers},
  year      = {2015},
  series    = {UbiComp/ISWC'15 Adjunct},
  pages     = {503--508},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Smart devices with incompatible protocols and APIs are increasing in everyday environments. Adaptive middleware techniques have enabled smart phones to become smart gateways between these incompatible devices by providing protocol translation services at runtime. Thus, mobile apps can easily use remote services to execute the app logic, which typically integrates services in a distributed mobile environment. However, as the number of services increase, and the user's context changes, it is challenging for mobile apps to discover relevant device services due to incompatible protocols and unknown devices. A smart agent is needed to guide service composition in mobile apps with respect to the user's changing context, so that mobile apps can seamlessly integrate services from different networks and execute complex tasks. To this end, I present a novel approach for context-aware service discovery based on semi-lazy bandit algorithms, and, present a functioning prototype as a microservice, which shows encouraging first results.},
  acmid     = {2801655},
  doi       = {10.1145/2800835.2801655},
  groups    = {IoT, Discovery},
  isbn      = {978-1-4503-3575-1},
  keywords  = {context-aware service discovery, contextual bandits, rank3},
  location  = {Osaka, Japan},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2800835.2801655},
}

@InProceedings{Julian:2016:CRI:2949550.2949562,
  author    = {Julian, Spencer and Shuey, Michael and Cook, Seth},
  title     = {Containers in Research: Initial Experiences with Lightweight Infrastructure},
  booktitle = {Proceedings of the XSEDE16 Conference on Diversity, Big Data, and Science at Scale},
  year      = {2016},
  series    = {XSEDE16},
  pages     = {25:1--25:6},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {HPC environments have traditionally existed installed directly on hardware or through virtual machine environments. Linux Containers, and Docker specifically, have gained extensive popularity; we believe this current trend toward containers and microservices can be applied to HPC to improve efficiency and quality of development and deployment. User interest in Docker is rising, with several communities planning production deployments. We describe some of our site's experiences, along with an autoscaling web cluster and an autoscaling PBS-based computational cluster we have developed that are currently in a pre-production testing phase. Some basic performance tests are covered, comparing network and filesystem performance between a native Docker environment and a traditional Red Hat-based environment. In our tests, we noticed negligible differences in computational performance when run out of the box, approximately 0.4%, but we required some minor tweaking in the form of additional docker plugins to achieve similar or better performance in the network and filesystem tests. While additional testing is needed for some aspects of computational clusters, particularly RDMA performance, we believe initial testing indicates Docker containers are ready for broader adoption at larger-scale production environments.},
  acmid     = {2949562},
  articleno = {25},
  doi       = {10.1145/2949550.2949562},
  groups    = {Teste, Experiencia, Deploy, Desenvolvimento, Performance},
  isbn      = {978-1-4503-4755-6},
  keywords  = {Docker, LXC, cgroups, container, rank4},
  location  = {Miami, USA},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2949550.2949562},
}

@Proceedings{Avritzer:2016:2851553,
  title     = {ICPE '16: Proceedings of the 7th ACM/SPEC on International Conference on Performance Engineering},
  year      = {2016},
  address   = {New York, NY, USA},
  publisher = {ACM},
  isbn      = {978-1-4503-4080-9},
  abstract  = {The 7th ACM/SPEC International Conference on Performance Engineering (ICPE 2016) takes place in Delft in The Netherlands in March 2016. The conference grew out of the ACM Workshop on Software Performance (WOSP since 1998) and the SPEC International Performance Engineering Workshop (SIPEW since 2008), with the goal of integrating theory and practice in the field of performance engineering. It is a great pleasure for us to offer an outstanding technical program this year, which we believe will allow researchers and practitioners to present their visions and latest innovation, and to exchange ideas within the community. Overall, we received 89 high quality submissions across all three tracks. The main Research Track attracted 57 submissions with 19 accepted (33% acceptance rate) for presentation at the conference. Among them were 16 full papers and three short papers. Each paper received at least three reviews from experienced program committee members. In the Work-In-Progress and Vision Track, six out of 15 contributions were selected. The Industry and Experience Track received 17 submissions, of which seven were selected for inclusion in the program. The accepted papers were organized into five research track sessions, two industry track sessions, and one WiP and vision track session. Three best paper candidates were also selected: two research papers and one industry paper. We are proud to have three excellent keynote speakers as part of our technical program: <ul><li>Bianca Schroeder from University of Toronto, Canada, presenting "Case studies from the real world: The importance of measurement and analysis in building better systems"</li> <li>Wilhelm Hasselbring from Kiel University, Germany, discussing "Microservices for Scalability"</li> <li>Angelo Corsaro, Chief Technology Officer at PrismTech, talking about "Cloudy, Foggy and Misty Internet of Things"</li></ul> In addition, the program includes four tutorials, a doctoral symposium, a poster and demo track, the SPEC Distinguished Dissertation Award, and three interesting workshops, including the International Workshop on Large-Scale Testing (LT), the 2nd International Workshop on Performance Analysis of Big data Systems (PABS), and the 2nd Workshop on Challenges in Performance Methods for Software Development (WOSPC). The program covers traditional ICPE topics such as software and systems performance modeling and prediction, analysis and optimization, characterization and profiling, as well as application of performance engineering theory and techniques to several practical fields, including distributed systems, cloud computing, storage, energy, big data, virtualized systems and containers.},
  keywords  = {rank1},
  location  = {Delft, The Netherlands},
}

@InProceedings{Zimmermann:2016:DDT:2993412.3014339,
  author    = {Zimmermann, Olaf},
  title     = {Designed and Delivered Today, Eroded Tomorrow?: Towards an Open and Lean Architecting Framework Balancing Agility and Sustainability},
  booktitle = {Proccedings of the 10th European Conference on Software Architecture Workshops},
  year      = {2016},
  series    = {ECSAW '16},
  pages     = {7:1--7:1},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Architecting for cost-effectiveness, longevity and endurance has multiple, often conflicting dimensions. For instance, agile practices emphasize the need for speed in software design, development and delivery, but do not necessarily prioritize mid- to long-term qualities such as extensibility and knowledge preservation. Risk- and cost-driven architecture design methods, pragmatic modeling, and technical debt management can help practicing architects to focus their efforts, but have to be tailored to be effective (e.g., according to project context, organizational constraints, and cultural factors). Architectural styles such as service-oriented architectures and its currently trending microservices incarnation promise to improve flexibility and maintainability through their principles and patterns, but still have to prove their cost-benefit efficiency in the long run (e.g., over the multi-decade lifetime of business information systems). This keynote presentation distills a set of open, lean and sustainable architecture practices and techniques from industrial experiences and existing work in the software architecture literature, and reports on the progress towards blending these practices and techniques into a comprehensive, yet comprehensible architecture framework. The featured assets include quality stories [1], C4 architecture modeling [2], decision sharing with Y-statements [3], architecturally evident coding styles [4], architectural refactoring [1], (micro-)services principles and patterns [5], and architecture roadmapping [6]. Examples drawn from actual case studies in multiple business sectors and industries demonstrate the applicability of these practices and techniques. The presentation concludes with a discussion of the changes to the role of the software architect in the digital age [7]. These ongoing changes drive the identification of research problems and challenges for the practical adoption and lasting impact of the practices and techniques in the framework (and other contributions to the body of knowledge on sustainable architectures).},
  acmid     = {3014339},
  articleno = {7},
  doi       = {10.1145/2993412.3014339},
  isbn      = {978-1-4503-4781-5},
  keywords  = {agile practices, architectural decisions, knowledge management, metrics, patterns, refactoring, service-oriented architecture, software quality, sustainability, rank5},
  location  = {Copenhagen, Denmark},
  numpages  = {1},
  url       = {http://doi.acm.org/10.1145/2993412.3014339},
}

@InProceedings{Nider:2016:CCM:2928275.2933275,
  author    = {Nider, Joel and Rapoport, Mike},
  title     = {Cross-ISA Container Migration},
  booktitle = {Proceedings of the 9th ACM International on Systems and Storage Conference},
  year      = {2016},
  series    = {SYSTOR '16},
  pages     = {24:1--24:1},
  address   = {New York, NY, USA},
  publisher = {ACM},
  abstract  = {Containers are a convenient way of encapsulating and isolating applications. They incur less overhead than virtual machines and provide more flexibility and versatility to improve server utilization. Many new cloud applications are being written in the microservices style to take advantage of container technologies. Each component of the application can be encapsulated in a separate container, which enables the use of other features such as auto-scaling. However, legacy applications can also benefit from containers which provide more efficient development and deployment models. In modern data centers, orchestration middle-ware is responsible for container placement, SLA enforcement and resource management. The orchestration software can implement various policies for managing the resources. The orchestration software can take corrective actions when detecting inefficiencies in the data center operation to satisfy the current policy. Power efficiency is becoming one of the most important characteristics taken into account when designing a data center and defining policy for the orchestration middleware [4]. Different server architectures have different power efficiency and energy proportionality characteristics. Recent research has shown that heterogeneous systems have the potential to significantly improve energy efficiency[3, 5]. Our work focuses on the mechanism required by the middle-ware to implement a power optimization policy. We research migration of containerized applications between servers inside a heterogeneous data center, for the purpose of optimizing power efficiency. Migrating a running container between different architectures relies on the compatibility of the application environment on the source and destination servers. Containers are viewed as a set of one or more processes and each process must have the ability to be migrated. A modified compiler is used to build executables in a manner allowing the program migration between different architectures. The source and destination servers must also have a shared file system and comparable networking capabilities. We take advantage of the recently added user-space page fault feature in the Linux kernel [2] to implement post-copy container migration in CRIU [1]. Post-copy migration significantly reduces perceived down-time of the container, and can potentially reduce network traffic as well. We propose creating a cluster of servers with different architectures (i.e., ARM, POWER, and x86) connected with a high-speed, low-latency network. This cluster will run SaaS applications in a containerized environment. The applications will be built using a specialized toolchain that ensures an identical memory layout across all architectures, enabling seamless migration at runtime. The majority of the challenges in cross-ISA migration are related to the toolchain adaptation, and ensuring the compatibility of the runtime environment across various servers in the cluster. The ability to efficiently migrate running containers between servers with different energy proportionality characteristics provides improved power savings during idle periods without compromising SLA commitments.},
  acmid     = {2933275},
  articleno = {24},
  doi       = {10.1145/2928275.2933275},
  groups    = {Performance, Deploy, Cloud},
  isbn      = {978-1-4503-4381-7},
  keywords  = {cloud computing, containers, heterogeneous architecture, power efficiency, rank1},
  location  = {Haifa, Israel},
  numpages  = {1},
  url       = {http://doi.acm.org/10.1145/2928275.2933275},
}

@Proceedings{Avritzer:2016:2859889,
  title     = {ICPE '16 Companion: Companion Publication for ACM/SPEC on International Conference on Performance Engineering},
  year      = {2016},
  address   = {New York, NY, USA},
  publisher = {ACM},
  isbn      = {978-1-4503-4147-9},
  abstract  = {The 7th ACM/SPEC International Conference on Performance Engineering (ICPE 2016) takes place in Delft in The Netherlands in March 2016. The conference grew out of the ACM Workshop on Software Performance (WOSP since 1998) and the SPEC International Performance Engineering Workshop (SIPEW since 2008), with the goal of integrating theory and practice in the field of performance engineering. It is a great pleasure for us to offer an outstanding technical program this year, which we believe will allow researchers and practitioners to present their visions and latest innovation, and to exchange ideas within the community. Overall, we received 89 high quality submissions across all three tracks. The main Research Track attracted 57 submissions with 19 accepted (33% acceptance rate) for presentation at the conference. Among them were 16 full papers and three short papers. Each paper received at least three reviews from experienced program committee members. In the Work-In-Progress and Vision Track, six out of 15 contributions were selected. The Industry and Experience Track received 17 submissions, of which seven were selected for inclusion in the program. The accepted papers were organized into five research track sessions, two industry track sessions, and one WiP and vision track session. Three best paper candidates were also selected: two research papers and one industry paper. We are proud to have three excellent keynote speakers as part of our technical program: <ul><li>Bianca Schroeder from University of Toronto, Canada, presenting "Case studies from the real world: The importance of measurement and analysis in building better systems"</li> <li>Wilhelm Hasselbring from Kiel University, Germany, discussing "Microservices for Scalability"</li> <li>Angelo Corsaro, Chief Technology Officer at PrismTech, talking about "Cloudy, Foggy and Misty Internet of Things"</li></ul> In addition, the program includes four tutorials, a doctoral symposium, a poster and demo track, the SPEC Distinguished Dissertation Award, and three interesting workshops, including the International Workshop on Large-Scale Testing (LT), the 2nd International Workshop on Performance Analysis of Big data Systems (PABS), and the 2nd Workshop on Challenges in Performance Methods for Software Development (WOSPC). The program covers traditional ICPE topics such as software and systems performance modeling and prediction, analysis and optimization, characterization and profiling, as well as application of performance engineering theory and techniques to several practical fields, including distributed systems, cloud computing, storage, energy, big data, virtualized systems and containers.},
  keywords  = {rank1},
  location  = {Delft, The Netherlands},
}

@InProceedings{Escobar2016,
  author        = {D. Escobar and D. Cárdenas and R. Amarillo and E. Castro and K. Garcés and C. Parra and R. Casallas},
  title         = {Towards the understanding and evolution of monolithic applications as microservices},
  booktitle     = {Proc. XLII Latin American Computing Conf. (CLEI)},
  year          = {2016},
  pages         = {1--11},
  month         = oct,
  __markedentry = {[romulo:6]},
  abstract      = {Nowadays, software development teams face the challenge of maintenance and evolution of large applications. This is known as modernization and comprises a process of understanding the existing application, and a process of transforming from the as-is state to the to-be state. In this article, we present an approach to modernize legacy applications into microservices. We propose a model-centered process to analyze and visualize the current structure and dependencies between the business layer and the data layer. Furthermore, we propose a modularization into clusters and microservices using four different diagrams. To validate our approach we have analyzed a JEE application with over 74566 LoC. The results show that the understanding is greatly improved through the diagrams proposed, and the modularization proposed constitutes the first step towards the automated modernization of the application.},
  doi           = {10.1109/CLEI.2016.7833410},
  groups        = {Desenvolvimento, Database},
  keywords      = {Business, Clustering algorithms, Computer architecture, Data models, Data visualization, Face, Java, Microservices, Model-Driven Development, Modernization, Software Architecture, Software Reengineering, rank5},
}

@InProceedings{Khazaei2016,
  author        = {H. Khazaei and C. Barna and N. Beigi-Mohammadi and M. Litoiu},
  title         = {Efficiency Analysis of Provisioning Microservices},
  booktitle     = {Proc. IEEE Int. Conf. Cloud Computing Technology and Science (CloudCom)},
  year          = {2016},
  pages         = {261--268},
  month         = dec,
  __markedentry = {[romulo:6]},
  abstract      = {Microservice architecture has started a new trend for application development/deployment in cloud due to its flexibility, scalability, manageability and performance. Various microservice platforms have emerged to facilitate the whole software engineering cycle for cloud applications from design, development, test, deployment to maintenance. In this paper, we propose a performance analytical model and validate it by experiments to study the provisioning performance of microservice platforms. We design and develop a microservice platform on Amazon EC2 cloud using Docker technology family to identify important elements contributing to the performance of microservice platforms. We leverage the results and insights from experiments to build a tractable analytical performance model that can be used to perform what-if analysis and capacity planning in a systematic manner for large scale microservices with minimum amount of time and cost.},
  doi           = {10.1109/CloudCom.2016.0051},
  groups        = {Experiencia, Cloud},
  keywords      = {Analytical models, Cloud computing, Computational modeling, Containers, Runtime, Time factors, Virtualization, Infrastructure-as-a-Service, Markov chain, Platform-as-a-Service, cloud computing, container, microservice, performance analysis, stochastic process, virtualization, rank4},
}

@InProceedings{O’Connor2016,
  author        = {R. O’Connor and P. Elger and P. M. Clarke},
  title         = {Exploring the Impact of Situational Context --- A Case Study of a Software Development Process for a Microservices Architecture},
  booktitle     = {Proc. IEEE/ACM Int. Conf. Software and System Processes (ICSSP)},
  year          = {2016},
  pages         = {6--10},
  month         = may,
  __markedentry = {[romulo:6]},
  abstract      = {Over the decades, a variety of software development processes have been proposed, each with their own advantages and disadvantages. It is however widely accepted that there is no single process that is perfectly suited to all settings, thus a software process should be molded to the needs of its situational context. In previous work, we have consolidated a substantial body of related research into an initial reference framework of the situational factors affecting the software development process. Practitioners can consult this framework in order to profile their context, a step necessary for effective software process decision making. In this paper, we report on the findings from a case study involving process discovery in a small but successful and growing software development firm. In this organization, which has a focus on continuous software evolution and delivery, we also applied the situational factors reference framework, finding that context is a complex and key informant for software process decisions. Studies of this type highlight the role of situational context in software process definition and evolution, and they raise awareness not just of the importance of situational context, but also of the complexity surrounding software process contexts, a complexity which may not be fully appreciated in all software development settings.},
  doi           = {10.1109/ICSSP.2016.009},
  keywords      = {Companies, Computer architecture, Containers, Context, Personnel, Software, Agile, Lean, Process Selection, Software Development Context, Software Development Process, rank1},
}

@InProceedings{Sousa2016,
  author        = {G. Sousa and W. Rudametkin and L. Duchien},
  title         = {Automated Setup of Multi-cloud Environments for Microservices Applications},
  booktitle     = {Proc. IEEE 9th Int. Conf. Cloud Computing (CLOUD)},
  year          = {2016},
  pages         = {327--334},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {Multi-cloud computing has been proposed as a way to reduce vendor dependence, comply with location regulations, and optimize reliability, performance and costs. Meanwhile, microservice architectures are becoming increasingly popular in cloud computing as they promote decomposing applications into small services that can be independently deployed and scaled, thus optimizing resources usage. However, setting up a multi-cloud environment to deploy a microservices-based application is still a very complex and time consuming task. Each microservice may require different functionality (e.g. software platforms, databases, monitoring and scalability tools) and have different location and redundancy requirements. Selection of cloud providers should take into account the individual requirements of each service, as well as the global requirements of reliability and scalability. Moreover, cloud providers can be very heterogeneous and offer disparate functionality, thus hindering comparison. In this paper we propose an automated approach for the selection and configuration of cloud providers for multi-cloud microservices-based applications. Our approach uses a domain specific language to describe the application's multi-cloud requirements and we provide a systematic method for obtaining proper configurations that comply with the application's requirements and the cloud providers' constraints.},
  doi           = {10.1109/CLOUD.2016.0051},
  groups        = {Cloud},
  keywords      = {Buildings, Cloud computing, Databases, Gears, Ontologies, Scalability, cloud management, microservices, multi-cloud, software product lines, variability management, rank3},
}

@Article{Pautasso2017,
  author        = {C. Pautasso and O. Zimmermann and M. Amundsen and J. Lewis and N. Josuttis},
  title         = {Microservices in Practice, Part 1: Reality Check and Service Design},
  journal       = {IEEE Software},
  year          = {2017},
  volume        = {34},
  number        = {1},
  pages         = {91--98},
  month         = jan,
  issn          = {0740-7459},
  __markedentry = {[romulo:6]},
  abstract      = {Service-oriented architecture (SOA) and microservices insiders Mike Amundsen, James Lewis, and Nicolai Josuttis share their experiences and predictions with department editors Cesare Pautasso and Olaf Zimmermann.},
  doi           = {10.1109/MS.2017.24},
  groups        = {Experiencia},
  keywords      = {Computer architecture, Context modeling, Semiconductor optical amplifiers, Service-oriented architecture, Software development, Software engineering, Writing, Conway's law, DDD, Extreme Programming, James Lewis, Mike Amundsen, Nicolai Josuttis, SOA, XP, domain-driven design, microservices, service-oriented architecture, software development, software engineering, rank5},
}

@Article{Fetzer2016,
  author        = {C. Fetzer},
  title         = {Building Critical Applications Using Microservices},
  journal       = {IEEE Security Privacy},
  year          = {2016},
  volume        = {14},
  number        = {6},
  pages         = {86--89},
  month         = nov,
  issn          = {1540-7993},
  __markedentry = {[romulo:6]},
  abstract      = {Safeguarding the correctness of critical software is a grand challenge. A microservice-based system is described that builds trustworthy systems on top of legacy hardware and software components, ensuring microservices' integrity, confidentiality, and correct execution with the help of secure enclaves.},
  doi           = {10.1109/MSP.2016.129},
  groups        = {Experiencia},
  keywords      = {trusted computing, critical applications, critical software correctness, legacy hardware, microservice confidentiality, microservice integrity, microservice-based system, secure enclaves, software components, trustworthy systems, Buildings, Containers, Kernel, Linux, Security, hardware, microservices, security, software, rank4},
}

@InProceedings{Kookarinrat2016,
  author        = {P. Kookarinrat and Y. Temtanapat},
  title         = {Design and implementation of a decentralized message bus for microservices},
  booktitle     = {Proc. 13th Int. Joint Conf. Computer Science and Software Engineering (JCSSE)},
  year          = {2016},
  pages         = {1--6},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {A new software architecture, known as microservices, becomes rapidly popular recently. Microservices could help developers cope well with the problems of software complexity and demands on an adaptive development process that needs to respond to changes quickly. In this architecture, a single monolithic large application would be divided into small multiple isolated services. They are separately deployed and communicated to other services via remote calls. This architectural style allows any changes on one service not affecting the others. However, if services directly make remote calls, it would create interdependencies and tight couplings between them. To remove such problem, this paper proposes a decentralized message bus to use as a communication tool between services. Our message bus provides a framework for services to collaborate. It divides into four main components, public API, message bus, messaging and service discovery. The API uses the HTTP and RESTful style of communication. We use decentralized service discovery to avoid a single point of failure of the system. The messaging uses a simple TCP connection with only a header and body in its message. We also define three necessary communication messages for the services, viz. request/response, notification and publish/subscribe. The proposed framework is implemented and tested with a real-world scenario. It works correctly without any problem. Also, to realize how it could be scaled, we run the system continuously with incremental services and traffics. From the observation on the resource consumption of CPU, memory and network I/O, we found that the network consumption grows linearly while the CPU and memory usages have little change in consumption.},
  doi           = {10.1109/JCSSE.2016.7748869},
  groups        = {Comunicacao, Ferramenta, Discovery},
  keywords      = {application program interfaces, hypermedia, microprocessor chips, software architecture, transport protocols, CPU, HTTP, RESTful communication style, TCP, adaptive development process, decentralized message bus, decentralized service discovery, messaging, microservices, multiple isolated services, public API, software complexity, Complexity theory, Computer architecture, Computer science, Iris, Load modeling, Protocols, Scalability, message bus, rank5},
}

@Article{Singleton2016,
  author        = {A. Singleton},
  title         = {The Economics of Microservices},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {16--20},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Microservices address the problem of efficiently building and managing complex software systems. For medium-sized systems, they can deliver cost reduction, quality improvement, agility, and decreased time to market. For large cloud systems, they fundamentally change the rules of the game. However, although microservices approaches offer substantial benefits, a microservices architecture requires extra machinery, which can impose substantial costs. This column explores both the costs and benefits of a microservices architecture.},
  doi           = {10.1109/MCC.2016.109},
  groups        = {Survey},
  keywords      = {cloud computing, economics, cloud systems, complex software systems, cost reduction, machinery, medium-sized systems, microservices architecture, quality improvement, Cloud computing, Complexity theory, Computer architecture, Economics, Legacy systems, Service computing, cloud economics, legacy systems, rank5},
}

@Article{Fazio2016,
  author        = {M. Fazio and A. Celesti and R. Ranjan and C. Liu and L. Chen and M. Villari},
  title         = {Open Issues in Scheduling Microservices in the Cloud},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {81--88},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {This article discusses the main advantages and challenges of adopting microservices in cloud computing. The microservices architecture allows software developers to build a distributed application as a set of independent components that work together. This model isn't new, but, applied in cloud systems, it increases datacenter scalability and reliability. The authors discuss available technologies for deploying and controlling microservices-based application architectures in the cloud.},
  doi           = {10.1109/MCC.2016.112},
  groups        = {Deploy, Cloud},
  keywords      = {Web services, cloud computing, datacenter scalability, distributed application, microservices architecture, open issues, reliability, scheduling, Cloud computing, Internet of things, Metasearch, Runtime, Servers, Service computing, Virtualization, Internet of Things, containers, federated clouds, microservices, service deployment, rank5},
}

@Article{Sill2016,
  author        = {A. Sill},
  title         = {The Design and Architecture of Microservices},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {76--80},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Microservices are sweeping through cloud design architectures, at once embodying new trends and making use of previous paradigms. This column explores the basis for these trends in both modern and historical standards, and sets out a direction for the future of microservices development.},
  doi           = {10.1109/MCC.2016.111},
  groups        = {Survey},
  keywords      = {cloud computing, software architecture, standards, cloud design architectures, historical standards, microservices, Cloud computing, Computer architecture, Design methdology, Service computing, Standards development, Storage automation, architecture, automation, cloud, containers, data, design, networks, rank4},
}

@Article{Esposito2016,
  author        = {C. Esposito and A. Castiglione and K. K. R. Choo},
  title         = {Challenges in Delivering Software in the Cloud as Microservices},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {10--14},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Microservices can be broadly defined as the design of service-oriented software using a set of small services. In a microservice architecture, application complexity is distributed among narrowly focused and independently deployable units of computation. Such complexity can result in security vulnerabilities. Trustworthiness is also an issue when dealing with microservices. Moreover, there may be gaps in existing legal frameworks with regard to this technology. Solutions to these issues must seek balance between security and performance.},
  doi           = {10.1109/MCC.2016.105},
  groups        = {Seguranca, Survey},
  keywords      = {cloud computing, security of data, service-oriented architecture, trusted computing, application complexity, cloud, microservice architecture, security vulnerabilities, service-oriented software design, trustworthiness, Cloud computing, Computer architecture, Computer security, Data mining, Law, Service computing, Service-oriented systems enginee, Trust management, cloud infrastructure, microservices, security, rank5},
}

@Article{Linthicum2016,
  author        = {D. S. Linthicum},
  title         = {Practical Use of Microservices in Moving Workloads to the Cloud},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {6--9},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Most enterprises believe the cloud will become the new home for applications; however, not all applications are ready for the cloud. Containers and microservices make it easier to move applications to the cloud. The application developer charged with refactoring the application must think about how to best redesign the applications to become containerized and service oriented. In essence, you're turning a monolithic application into something that's more complex and distributed. However, the real objective is for it to become more productive, agile, and cost effective.},
  doi           = {10.1109/MCC.2016.114},
  groups        = {Experiencia, Performance},
  keywords      = {cloud computing, service-oriented architecture, cloud, enterprises, microservices, monolithic application, moving workloads, service oriented applications, Cloud computing, Complexity theory, Computer architecture, Computer security, Information management, Information storage, Service-oriented architecture, Cloud Tidbits, containers, rank5},
}

@InProceedings{Butzin2016,
  author        = {B. Butzin and F. Golatowski and D. Timmermann},
  title         = {Microservices approach for the internet of things},
  booktitle     = {Proc. IEEE 21st Int. Conf. Emerging Technologies and Factory Automation (ETFA)},
  year          = {2016},
  pages         = {1--6},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {The microservice approach has created a hype in the domain of cloud and enterprise application business. Before, grown, monolithic, software has been pushed to the limits of maintainability and scalability. The microservice architecture approach utilizes the service oriented architecture together with best practices and recent developments in software virtualization to overcome those issues. One monolithic application is split up into a set of distributed services. Those are strongly decoupled to enable high maintainability and scalability. In this case an application is split up in a top down manner. In the internet of things, applications need to be put together from a set of small and independent services. Thus, creating value added services would require to freely combine services of different vendors to fully make use of the IoT's heterogeneity. Even though the direction is different, many of the requirements in microservices are similar to those of the internet of things. This paper investigates patterns and best practices that are used in the microservices approach and how they can be used in the internet of things. Since the companies using microservices have made considerations on how services have to be designed to work together properly, IoT applications might adopt several of these design decisions to improve the ability to create value added applications from a multitude of services.},
  doi           = {10.1109/ETFA.2016.7733707},
  groups        = {IoT},
  keywords      = {Internet of Things, service-oriented architecture, IoT heterogeneity, cloud domain, distributed services, enterprise application business, microservice architecture, microservices requirements, service oriented architecture, software maintainability, software scalability, software virtualization, value added services, best practices, internet of things, microservices, patterns, rank4},
}

@InProceedings{Ueda2016,
  author        = {T. Ueda and T. Nakaike and M. Ohara},
  title         = {Workload characterization for microservices},
  booktitle     = {Proc. IEEE Int. Symp. Workload Characterization (IISWC)},
  year          = {2016},
  pages         = {1--10},
  month         = sep,
  __markedentry = {[romulo:5]},
  abstract      = {The microservice architecture is a new framework to construct a Web service as a collection of small services that communicate with each other. It is becoming increasingly popular because it can accelerate agile software development, deployment, and operation practices. As a result, cloud service providers are expected to host an increasing number of microservices that can generate significant resource pressure on the cloud infrastructure. We want to understand the characteristics of microservice workloads to design an infrastructure optimized for microservices. In this paper, we used Acme Air, an open-source benchmark for Web services, and analyzed the behavior of two versions of the benchmark, microservice and monolithic, for two widely used language runtimes, Node.js and Java. We observed a significant overhead due to the microservice architecture; the performance of the microservice version can be 79.2\% lower than the monolithic version on the same hardware configuration. On Node.js, the microservice version consumed 4.22 times more time in the libraries of Node.js than the monolithic version to process one user request. On Java, the microservice version also consumed more time in the application server than the monolithic version. We explain these performance differences from both hardware and software perspectives. We discuss the network virtualization in Docker, an infrastructure for microservices that has nonnegligible impact on performance. These findings give clues to develop optimization techniques in a language runtime and hardware for microservice workloads.},
  doi           = {10.1109/IISWC.2016.7581269},
  groups        = {Performance},
  keywords      = {Java, Web services, cloud computing, public domain software, software architecture, software prototyping, Acme Air, Docker, Node.js, Web service, agile software development, cloud infrastructure, cloud service providers, microservice architecture, microservice workload characterization, network virtualization, open-source benchmark, optimization techniques, resource pressure, Cloud computing, Computer architecture, Containers, Runtime, Service-oriented architecture, WebSphere Liberty, container, microservices, rank4},
}

@InProceedings{Bogner2016,
  author        = {J. Bogner and A. Zimmermann},
  title         = {Towards Integrating Microservices with Adaptable Enterprise Architecture},
  booktitle     = {Proc. IEEE 20th Int. Enterprise Distributed Object Computing Workshop (EDOCW)},
  year          = {2016},
  pages         = {1--6},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {IT environments that consist of a very large number of rather small structures like microservices, Internet of Things (IoT) components, or mobility systems are emerging to support flexible and agile products and services in the age of digital transformation. Biological metaphors of living and adaptable ecosystems with service-oriented enterprise architectures provide the foundation for self-optimizing, resilient run- time environments and distributed information systems. We are extending Enterprise Architecture (EA) methodologies and models that cover a high degree of heterogeneity and distribution to support the digital transformation and related information systems with micro-granular architectures. Our aim is to support flexibility and agile transformation for both IT and business capabilities within adaptable digital enterprise architectures. The present research paper investigates mechanisms for integrating Microservice Architectures (MSA) by extending original enterprise architecture reference models with elements for more flexible architectural metamodels and EA-mini-descriptions.},
  doi           = {10.1109/EDOCW.2016.7584392},
  keywords      = {information systems, service-oriented architecture, IT environments, Internet of Things components, adaptable digital enterprise architectures, adaptable ecosystems, digital transformation, distributed information systems, enterprise architecture methodologies, microservices integration, mobility systems, resilient run-time environments, self-optimizing systems, service-oriented enterprise architectures, Adaptation models, Biological system modeling, Business, Computer architecture, Context, Service-oriented architecture, Unified modeling language, rank1},
}

@InProceedings{Florio2016,
  author        = {L. Florio and E. D. Nitto},
  title         = {Gru: An Approach to Introduce Decentralized Autonomic Behavior in Microservices Architectures},
  booktitle     = {Proc. IEEE Int. Conf. Autonomic Computing (ICAC)},
  year          = {2016},
  pages         = {357--362},
  month         = jul,
  __markedentry = {[romulo:2]},
  abstract      = {Microservices architectures support the development of complex applications by composing simple basic blocks, the microservices. This enables runtime adaptation and dynamic reconfiguration of the applications. The approaches that have been developed so far, however, focus on offering only basic self-healing capabilities (e.g., restarting a failed microservice), while do not fully tackle the problem of offering advanced and general mechanisms for building complex and decentralized self-adaptation strategies able to deal with applications built of a large number of nodes. In this work we focus on how to add autonomic capabilities to microservices without changing the way they are implemented but exploiting their containers. Our approach is called Gru and creates a new level of abstraction, containing autonomic intelligence, on top of Docker containers. Gru supports a variety of decentralized autonomic operations and does not make any assumption nor constraint on the structure of the microservices system to be controlled. This paper presents Gru together with a preliminary evaluation of its features.},
  doi           = {10.1109/ICAC.2016.25},
  groups        = {Deploy},
  keywords      = {self-adjusting systems, service-oriented architecture, software fault tolerance, Docker containers, Gru, autonomic capabilities, autonomic intelligence, decentralized autonomic behavior, decentralized autonomic operations, decentralized self-adaptation strategies, dynamic reconfiguration, microservices architectures, runtime adaptation, self-healing capabilities, Autonomic systems, Cloud computing, Computer architecture, Containers, Peer-to-peer computing, Quality of service, Docker, containers, decentralized, microservices, self-adaptation, rank5},
}

@InProceedings{Kecskemeti2016,
  author        = {G. Kecskemeti and A. C. Marosi and A. Kertesz},
  title         = {The ENTICE approach to decompose monolithic services into microservices},
  booktitle     = {Proc. Int. Conf. High Performance Computing Simulation (HPCS)},
  year          = {2016},
  pages         = {591--596},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {Cloud computing has enabled elastic and on-demand service provisioning to achieve more efficient resource utilisation and quicker responses to varying application loads. Virtual machines, the building blocks of clouds, can be created using provider specific templates stored in proprietary repositories, which may lead to provider lock-in and decreased portability. Despite these enabling technologies, large scale service oriented applications are still mostly inelastic. Such applications often use monolithic services that limit the elasticity (e.g., by obstructing the replicability of parts of a monolithic service). Decomposing these services (leading to smaller, more targeted and more modular services) would open towards elasticity, but the decomposition process is mostly manual. This paper introduces a methodology for decomposing monolithic services to several so called microservices. The proposed methodology applies several outcomes of the ENTICE project (namely its image synthesis and optimisation tools). Finally, the paper provides insights on how these outcomes help revitalise past monolithic services, and what techniques are applied to aid future microservice developers.},
  doi           = {10.1109/HPCSim.2016.7568389},
  groups        = {Desenvolvimento},
  keywords      = {cloud computing, resource allocation, service-oriented architecture, virtual machines, ENTICE approach, elastic service provisioning, image synthesis, large scale service oriented applications, microservices, monolithic services, on-demand service provisioning, optimisation tools, portability, proprietary repositories, provider lock-in, resource utilisation, service oriented architecture, Cloud computing, Companies, Image generation, Optimization, Quality of service, Virtual machining, service oriented architectures, virtual machine images, rank3},
}

@InProceedings{Hassan2016,
  author        = {S. Hassan and R. Bahsoon},
  title         = {Microservices and Their Design Trade-Offs: A Self-Adaptive Roadmap},
  booktitle     = {Proc. IEEE Int. Conf. Services Computing (SCC)},
  year          = {2016},
  pages         = {813--818},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {Migrating to microservices (microservitization) enables optimising the autonomy, replaceability, decentralised governance and traceability of software architectures. Despite the hype for microservitization , the state of the art still lacks consensus on the definition of microservices, their properties and their modelling techniques. This paper summarises views of microservices from informal literature to reflect on the foundational context of this paradigm shift. A strong foundational context can advance our understanding of microservitization and help guide software architects in addressing its design problems. One such design problem is finalising the optimal level of granularity of a microservice architecture. Related design trade-offs include: balancing the size and number of microservices in an architecture and balancing the nonfunctional requirement satisfaction levels of the individual microservices as well as their satisfaction for the overall system. We propose how self-adaptivity can assist in addressing these design trade-offs and discuss some of the challenges such a selfadaptive solution. We use a hypothetical online movie streaming system to motivate these design trade-offs. A solution roadmap is presented in terms of the phases of a feedback control loop.},
  doi           = {10.1109/SCC.2016.113},
  keywords      = {formal specification, software architecture, feedback control loop, microservice architecture granularity, microservitization, nonfunctional requirement satisfaction levels, online movie streaming system, self-adaptivity, software architectures, Browsers, Business, Computer architecture, Context, Motion pictures, Quality of service, Software, decision-making, granularity, microservices, non-functional requirements, self-adaptativity, trade-offs, rank4},
}

@InProceedings{Liu2016,
  author        = {D. Liu and H. Zhu and C. Xu and I. Bayley and D. Lightfoot and M. Green and P. Marshall},
  title         = {CIDE: An Integrated Development Environment for Microservices},
  booktitle     = {Proc. IEEE Int. Conf. Services Computing (SCC)},
  year          = {2016},
  pages         = {808--812},
  month         = jun,
  __markedentry = {[romulo:5]},
  abstract      = {Microservices is a flexible architectural style that has many advantages over the alternative monolithic style. These include better performance and scalability. It is particularly suitable, and widely adopted, for cloud-based applications, because in this architecture a software system consisting of a large suite of services of fine granularity, each running its own process and communicating with the others. However, programming such systems is more complex. In this paper we report on CIDE, an integrated software development environment that helps with this. CIDE supports programming in a novel agent-oriented language called CAOPLE and tests their execution in a cluster environment. We present the architecture of CIDE, discuss its design based on the principles of the DevOps software development methodology, and describe facilities that support continuous testing and seamless integration, two other advantages of Microservices.},
  doi           = {10.1109/SCC.2016.112},
  groups        = {Linguagem},
  keywords      = {cloud computing, object-oriented languages, object-oriented programming, program testing, software agents, software architecture, CIDE, Caste-centric agent-oriented programming language and environment, DevOps software development methodology, architectural style, cloud-based applications, cluster environment, continuous testing, integrated development environment, microservices, seamless integration, software system, Cloud computing, Computer architecture, Computers, Programming, Testing, Virtual machining, Agent-Oriented Programming, Integrated Software Development Environment (IDE), Microservices, Programming Languages and Tools, Service-Oriented Architectures, rank5},
}

@InProceedings{Barais2016,
  author        = {O. Barais and J. Bourcier and Y. D. Bromberg and C. Dion},
  title         = {Towards microservices architecture to transcode videos in the large at low costs},
  booktitle     = {Proc. Int. Conf. Telecommunications and Multimedia (TEMU)},
  year          = {2016},
  pages         = {1--6},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {The increasing popularity of videos over Internet, combined with the wide heterogeneity of various kinds of end users' devices, imposes strong requirements on the underlying infrastructure and computing resources to meet the users expectations. In particular, designing an adequate transcoding workflow in the cloud to stream videos at large scale is: (i) costly, and (ii) complex. By inheriting key concepts from the software engineering domain, such as separation of concerns and microservice architecture style, we are giving our experience feedbacks of building both a low cost and efficient transcoding platform over an ad hoc computing cloud built around a rack of Raspberry Pis.},
  doi           = {10.1109/TEMU.2016.7551918},
  groups        = {Experiencia, Performance},
  keywords      = {Internet, cloud computing, transcoding, video coding, Raspberry Pis, ad hoc cloud computing, adequate transcoding workflow, microservice architecture, software engineering domain, video streaming, video transcoding, Cloud computing, Containers, Servers, Streaming media, Transcoding, Videos, rank2},
}

@InProceedings{Heorhiadi2016,
  author        = {V. Heorhiadi and S. Rajagopalan and H. Jamjoom and M. K. Reiter and V. Sekar},
  title         = {Gremlin: Systematic Resilience Testing of Microservices},
  booktitle     = {Proc. IEEE 36th Int. Conf. Distributed Computing Systems (ICDCS)},
  year          = {2016},
  pages         = {57--66},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {Modern Internet applications are being disaggregated into a microservice-based architecture, with services being updated and deployed hundreds of times a day. The accelerated software life cycle and heterogeneity of language runtimes in a single application necessitates a new approach for testing the resiliency of these applications in production infrastructures. We present Gremlin, a framework for systematically testing the failure-handling capabilities of microservices. Gremlin is based on the observation that microservices are loosely coupled and thus rely on standard message-exchange patterns over the network. Gremlin allows the operator to easily design tests and executes them by manipulating inter-service messages at the network layer. We show how to use Gremlin to express common failure scenarios and how developers of an enterprise application were able to discover previously unknown bugs in their failure-handling code without modifying the application.},
  doi           = {10.1109/ICDCS.2016.11},
  groups        = {Teste, Ferramenta},
  issn          = {1063-6927},
  keywords      = {Internet, program testing, software fault tolerance, Gremlin, Internet applications, accelerated software life cycle, failure-handling code, interservice messages, language runtimes, message-exchange patterns, microservice failure-handling capabilities, microservice-based architecture, network layer, production infrastructures, systematic microservice resilience testing, Cloud computing, Power system faults, Power system protection, Runtime, Standards, Systematics, Testing, Failure-recovery testing, Microservices, rank1},
}

@InProceedings{Vresk2016,
  author        = {T. Vresk and I. Čavrak},
  title         = {Architecture of an interoperable IoT platform based on microservices},
  booktitle     = {Proc. Electronics and Microelectronics (MIPRO) 2016 39th Int. Convention Information and Communication Technology},
  year          = {2016},
  pages         = {1196--1201},
  month         = may,
  __markedentry = {[romulo:6]},
  abstract      = {The vision of the Internet of Things enabled the development of a wide spectrum of services, applications and ecosystems, deemed infeasible not long ago. However, lack of standardization poses a number of questions still requiring proper addressing. Due to the need of supporting large number of users and significant data processing throughput, Internet of Things requires a specific approach towards the problem of providing sufficient scalability and performance, clearly pointing towards the distribution of effort among a large number of small and specialized services. Reflecting on the importance of coexistence of heterogeneous systems supporting the Internet of Things, this paper presents an overview of the specific problems inherent to the IoT and the proposal of an architecture of a microservice based middleware aimed at connecting heterogeneous IoT devices. The middleware functionality is achieved irrespective of the size and complexity of a given device network, both from the data model aspect and from the aspect of connecting existing and newly created middleware components.},
  doi           = {10.1109/MIPRO.2016.7522321},
  groups        = {IoT},
  keywords      = {Internet of Things, data handling, ecology, middleware, open systems, data processing, ecosystems, interoperable IoT platform, microservices, middleware functionality, Computer architecture, Data models, Internet of things, Interoperability, Protocols, Scalability, Standardization, rank2},
}

@InProceedings{Gadea2016,
  author        = {C. Gadea and M. Trifan and D. Ionescu and M. Cordea and B. Ionescu},
  title         = {A microservices architecture for collaborative document editing enhanced with face recognition},
  booktitle     = {Proc. IEEE 11th Int. Symp. Applied Computational Intelligence and Informatics (SACI)},
  year          = {2016},
  pages         = {441--446},
  month         = may,
  __markedentry = {[romulo:2]},
  abstract      = {Modern web applications can now provide rich and dynamic user experiences, such as allowing multiple users to collaboratively edit rich-text documents in real-time from multiple devices. Application architectures are evolving to support the development and deployment of such interactive functionality by decoupling software components into microservices. This paper introduces the architecture and the implementation of a collaborative rich-text editor that makes use of microservices to enable and enhance its scalable co-editing functionality. This includes microservices for synchronizing unstructured text using operational transformations, for chat functionality, and for detecting and recognizing faces in images added to the editor. The architecture makes use of Docker to allow for the development and testing of individual services as separate containers enabling seamless deployment across the available network of computers and other computing devices. The system will be demonstrated by showing how microservices make it possible for multiple users to co-edit a document where images containing faces are added and recognized as part of the document content, thereby supporting the document creation process.},
  doi           = {10.1109/SACI.2016.7507409},
  groups        = {Experiencia},
  keywords      = {Internet, document image processing, face recognition, software architecture, text analysis, Docker, Web applications, chat functionality, collaborative document editing, document creation process, microservices architecture, operational transformation, rich-text document editing, user experience, Collaboration, Computer architecture, Databases, Face, Face recognition, Google, Real-time systems, collaborative editing, docker, face detection, groupware, microservices, real-time web, rank5},
}

@InProceedings{Jaramillo2016,
  author        = {D. Jaramillo and D. V. Nguyen and R. Smart},
  title         = {Leveraging microservices architecture by using Docker technology},
  booktitle     = {Proc. SoutheastCon 2016},
  year          = {2016},
  pages         = {1--5},
  month         = mar,
  __markedentry = {[romulo:6]},
  abstract      = {Microservices architecture is not a hype and for awhile, started getting attention from organizations who want to shorten time to market of a software product by improving productivity effect through maximizing the automation in all life circle of the product. However, microservices architecture approach also introduces a lot of new complexity and requires application developers a certain level of maturity in order to confidently apply the architectural style. Docker has been a disruptive technology which changes the way applications are being developed and distributed. With a lot of advantages, Docker is a very good fit to implementing microservices architecture. In this paper we will discuss about how Docker can effectively help in leveraging mircoservices architecture with a real working model as a case study.},
  doi           = {10.1109/SECON.2016.7506647},
  groups        = {Experiencia, Deploy},
  keywords      = {client-server systems, productivity, software architecture, time to market, Docker technology, architectural style, automation maximization, disruptive technology, microservice architecture, productivity effect, software product life circle, Acceleration, Architecture, Automation, Buildings, Business, Computer architecture, Containers, automation, devops, docker, micoservices, rank5},
}

@InProceedings{Safina2016,
  author        = {L. Safina and M. Mazzara and F. Montesi and V. Rivera},
  title         = {Data-Driven Workflows for Microservices: Genericity in Jolie},
  booktitle     = {Proc. IEEE 30th Int. Conf. Advanced Information Networking and Applications (AINA)},
  year          = {2016},
  pages         = {430--437},
  month         = mar,
  __markedentry = {[romulo:5]},
  abstract      = {Microservices is an architectural style inspired by service-oriented computing that has recently started gainingpopularity. Jolie is a programming language based on the microservices paradigm: the main building block of Jolie systems are services, in contrast to, e.g., functions or objects. The primitives offered by the Jolie language elicit many of the recurring patterns found in microservices, like load balancers and structured processes. However, Jolie still lacks some useful constructs for dealing with message types and data manipulation that are present in service-oriented computing. In this paper, we focus on the possibility of expressing choices at the level of data types, a feature well represented in standards for Web Services, e.g., WSDL. We extend Jolie to support such type choices, and enable Jolie processes to act on data generically (without knowing which type it has in the choice). We show the impact of our implementation on some of the typical scenarios found in microservice systems. This shows how computation can move from a process-driven to a data-driven approach, and leads to the preliminary identification of recurring communication patterns that can be shaped as design patterns.},
  doi           = {10.1109/AINA.2016.95},
  groups        = {Linguagem},
  issn          = {1550-445X},
  keywords      = {Web services, database languages, high level languages, service-oriented architecture, workflow management software, Jolie language, Jolie systems, architectural style, data manipulation, data-driven workflows, microservices, programming language, service-oriented computing, Calculus, Computer architecture, Computer languages, Programming, Protocols, Servers, Syntactics, Jolie, Microservices, data-driven workflow, genericity, rank4},
}

@InProceedings{Xu2016,
  author        = {C. Xu and H. Zhu and I. Bayley and D. Lightfoot and M. Green and P. Marshall},
  title         = {CAOPLE: A Programming Language for Microservices SaaS},
  booktitle     = {Proc. IEEE Symp. Service-Oriented System Engineering (SOSE)},
  year          = {2016},
  pages         = {34--43},
  month         = mar,
  __markedentry = {[romulo:5]},
  abstract      = {The microservices architecture is widely regarded as a promising approach to service-oriented systems. However, developing applications in the microservices architecture presents three main challenges: (a) how to program systems that consists of a large number of services running in parallel and distributed over a cluster of computers, (b) how to reduce the communication overhead caused by executing a large number of small services, (c) how to support the flexible deployment of services to a network to achieve system load balance. This paper presents a programming language called CAOPLE and reports the implementation of the language on a virtual machine called CAVM-2. The paper demonstrates how this approach meets these challenges.},
  doi           = {10.1109/SOSE.2016.46},
  groups        = {Linguagem},
  keywords      = {cloud computing, programming languages, resource allocation, service-oriented architecture, virtual machines, CAOPLE, CAVM-2, SaaS, microservices architecture, programming language, service-oriented system, software as a service, system load balancing, virtual machine, Computer architecture, Computer languages, Containers, Runtime, Servers, Software as a service, Virtual machining, Agent orientation, Cloud computing, Microservices architecture, Parallel programming model, Programming languages, Service-oriented software, Virtual machine, rank5},
}

@InProceedings{Guo2016,
  author        = {D. Guo and W. Wang and G. Zeng and Z. Wei},
  title         = {Microservices Architecture Based Cloudware Deployment Platform for Service Computing},
  booktitle     = {Proc. IEEE Symp. Service-Oriented System Engineering (SOSE)},
  year          = {2016},
  pages         = {358--363},
  month         = mar,
  __markedentry = {[romulo:6]},
  abstract      = {With the rising of Cloud computing, evolution have occurred not only in datacenter, but also in software development, deployment, maintain and usage. How to build cloud platform for traditional software, and how to deliver cloud service to users are central research fields which will have a huge impact. In recent years, the development of microservice and container technology make software paradigm evolve towards Cloudware in cloud environment. Cloudware, which is based on service and supported by cloud platform, is an important method to cloudalize traditional software. It is also a significant way for software development, deployment, maintenance and usage in future cloud environment. Furthermore, it creates a completely new thought for software in cloud platform. In this paper, we proposed a new Cloudware PaaS platform based on microservice architecture and light weighted container technology. We can directly deploy traditional software which provides services to users by browser in this platform without any modification. By utilizing the microservice architecture, this platform has the characteristics of scalability, auto-deployment, disaster recovery and elastic configuration.},
  doi           = {10.1109/SOSE.2016.22},
  groups        = {Cloud, Experiencia, Ferramenta, Deploy},
  keywords      = {cloud computing, software architecture, software maintenance, cloudware PaaS platform, cloudware deployment platform, microservice architecture, service computing, software deployment, software development, Cloud computing, Computer architecture, Containers, Rendering (computer graphics), Servers, Virtualization, Cloudware, Container, Micro-service, PaaS, rank4},
}

@Article{Balalaie2016,
  author        = {A. Balalaie and A. Heydarnoori and P. Jamshidi},
  title         = {Microservices Architecture Enables DevOps: Migration to a Cloud-Native Architecture},
  journal       = {IEEE Software},
  year          = {2016},
  volume        = {33},
  number        = {3},
  pages         = {42--52},
  month         = may,
  issn          = {0740-7459},
  __markedentry = {[romulo:5]},
  abstract      = {This article reports on experiences and lessons learned during incremental migration and architectural refactoring of a commercial mobile back end as a service to microservices architecture. It explains how the researchers adopted DevOps and how this facilitated a smooth migration.},
  doi           = {10.1109/MS.2016.64},
  groups        = {Experiencia, DevOps},
  keywords      = {cloud computing, software architecture, software maintenance, DevOps, architectural refactoring, cloud-native architecture, incremental migration, microservices architecture, Cloud computing, Computer architecture, Microservices, Mobile communication, Refractoring, Scalability, Servers, Software architecture, microservices, migration pattern, mobile back end as a service, software development, software engineering, rank5},
}

@InProceedings{Sun2015,
  author        = {Y. Sun and S. Nanda and T. Jaeger},
  title         = {Security-as-a-Service for Microservices-Based Cloud Applications},
  booktitle     = {Proc. IEEE 7th Int. Conf. Cloud Computing Technology and Science (CloudCom)},
  year          = {2015},
  pages         = {50--57},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {Microservice architecture allows different parts of an application to be developed, deployed and scaled independently, therefore becoming a trend for developing cloud applications. However, it comes with challenging security issues. First, the network complexity introduced by the large number of microservices greatly increases the difficulty in monitoring the security of the entire application. Second, microservices are often designed to completely trust each other, therefore compromise of a single microservice may bring down the entire application. The problems are only exacerbated by the cloud, since applications no longer have complete control over their networks. In this paper, we propose a design for security-as-a-service for microservices-based cloud applications. By adding a new API primitive FlowTap for the network hypervisor, we build a flexible monitoring and policy enforcement infrastructure for network traffic to secure cloud applications. We demonstrate the effectiveness of our solution by deploying the Bro network monitor using FlowTap. Results show that our solution is flexible enough to support various kinds of monitoring scenarios and policies and it incurs minimal overhead (~6\%) for real world usage. As a result, cloud applications can leverage our solution to deploy network security monitors to flexibly detect and block threats both external and internal to their network.},
  doi           = {10.1109/CloudCom.2015.93},
  groups        = {Cloud},
  keywords      = {application program interfaces, cloud computing, security of data, trusted computing, API primitive FlowTap, Bro network monitor, microservice-based cloud applications, network hypervisor, policy enforcement infrastructure, security-as-a-service, Cloud computing, Complexity theory, Computer architecture, DVD, Electronic mail, Monitoring, Security, microservices, network monitoring, security, rank4},
}

@InProceedings{Amaral2015,
  author        = {M. Amaral and J. Polo and D. Carrera and I. Mohomed and M. Unuvar and M. Steinder},
  title         = {Performance Evaluation of Microservices Architectures Using Containers},
  booktitle     = {Proc. IEEE 14th Int. Symp. Network Computing and Applications},
  year          = {2015},
  pages         = {27--34},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Micro services architecture has started a new trend for application development for a number of reasons: (1) to reduce complexity by using tiny services, (2) to scale, remove and deploy parts of the system easily, (3) to improve flexibility to use different frameworks and tools, (4) to increase the overall scalability, and (5) to improve the resilience of the system. Containers have empowered the usage of micro services architectures by being lightweight, providing fast start-up times, and having a low overhead. Containers can be used to develop applications based on monolithic architectures where the whole system runs inside a single container or inside a micro services architecture where one or few processes run inside the containers. Two models can be used to implement a micro services architecture using containers: master-slave, or nested-container. The goal of this work is to compare the performance of CPU and network running benchmarks in the two aforementioned models of micro services architecture hence provide a benchmark analysis guidance for system designers.},
  doi           = {10.1109/NCA.2015.49},
  groups        = {Performance},
  keywords      = {microprocessor chips, performance evaluation, software architecture, CPU, application development, benchmark analysis guidance, master-slave, microservices architecture, monolithic architecture, nested-container, network running benchmark, overall scalability, system designer, Computer architecture, Containers, Linux, Master-slave, Servers, Virtual machining, Virtualization, Microservices, Networking, Performance Evaluation, rank5},
}

@InProceedings{Brueggemann2014,
  author        = {M. E. Brüggemann and R. Vallon and A. Parlak and T. Grechenig},
  title         = {Modelling microservices in email-marketing concepts, implementation and experiences},
  booktitle     = {Proc. 9th Int. Conf. Software Paradigm Trends (ICSOFT-PT)},
  year          = {2014},
  pages         = {67--71},
  month         = aug,
  __markedentry = {[romulo:6]},
  abstract      = {Our experience with email-based marketing campaigns (or short: {\textquotedblleft}Microservices{\textquotedblright}) showed that they are an intersecting set of a) projects and processes and b) technology and creativity. Their properties of fixed due date, fixed scope and at the same time fixed duration render classical management methodologies unfeasible. The same applies to the supporting enterprise infrastructure architecture, where ad-hoc changes lead to a loss of stability and performance. The remedy was found in Model-Driven Engineering; a choreography for Microservices helped to indicate improvement opportunities for both the architecture and the information flow within, which in turn increased throughput.},
  keywords      = {Biological system modeling, Business, Computer architecture, Context, Object oriented modeling, Planning, Software, BPMN, Email-Marketing, Enterprise Modelling, MDE, Microservices, Model-Driven Engineering, rank1},
}

@InProceedings{Bak2015,
  author        = {P. Bak and R. Melamed and D. Moshkovich and Y. Nardi and H. Ship and A. Yaeli},
  title         = {Location and Context-Based Microservices for Mobile and Internet of Things Workloads},
  booktitle     = {Proc. IEEE Int. Conf. Mobile Services},
  year          = {2015},
  pages         = {1--8},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {Research institutes such as Gartner and Forrester claim that the future of mobile will focus around the user's context. Most of the future mobile applications will leverage user context to provide a richer user experience and deeper engagement, and consequently higher customer value. We present three cloud micro services that can substantially accelerate the development and evolvement of location and context-based applications. These include a contextual triggering micro service used to derive the user's context in the moment of interaction, and visualization and analytics micro services to distill business and operational insights from application data. These micro services are described alongside mobile and Internet of Things usage examples.},
  doi           = {10.1109/MobServ.2015.11},
  groups        = {IoT},
  issn          = {2329-6429},
  keywords      = {Internet of Things, cloud computing, mobile computing, Internet of Things workloads, analytics microservices, business insights, cloud microservices, context-based applications, context-based microservices, customer value, location applications, location microservices, mobile applications, mobile workloads, operational insights, user context, user experience, visualization, Business, Context, Data visualization, Geospatial analysis, Image color analysis, Mobile communication, IoT, anomaly detection, context-based services, location-based services, maps, microservices, triggers, rank4},
}

@InProceedings{Stubbs2015,
  author        = {J. Stubbs and W. Moreira and R. Dooley},
  title         = {Distributed Systems of Microservices Using Docker and Serfnode},
  booktitle     = {Proc. 7th Int. Workshop Science Gateways},
  year          = {2015},
  pages         = {34--39},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {We review container technology and the challenge of service discovery in micro service architectures and introduce Serf node, a fully decentralized open source solution to the service discovery problem, based on the Serf project. Serf node is a non-intrusive Docker image that composes one or more arbitrary Docker containers. The new images can be deployed into a cluster of Serf nodes, where it advertises itself and provides service discovery mechanisms, monitoring, and self-healing. The resulting cluster is a homogeneous and complete graph, with no master node. We survey existing solutions to the service discovery problem and compare them to Serf node. As an example of the extensibility of Serf node, we show the construction of a file system synchronization solution between Docker containers using Git.},
  doi           = {10.1109/IWSG.2015.16},
  groups        = {Discovery},
  keywords      = {public domain software, service-oriented architecture, software packages, Serf node, arbitrary Docker containers, decentralized open source solution, distributed systems, file system synchronization solution, microservices architectures, nonintrusive Docker image, service discovery mechanisms, service discovery problem, Complexity theory, Computer architecture, Containers, Monitoring, Protocols, Servers, Synchronization, containers, distributed, microservices, rank5},
}

@InProceedings{Savchenko2015,
  author        = {D. I. Savchenko and G. I. Radchenko and O. Taipale},
  title         = {Microservices validation: Mjolnirr platform case study},
  booktitle     = {Proc. Electronics and Microelectronics (MIPRO) 2015 38th Int. Convention Information and Communication Technology},
  year          = {2015},
  pages         = {235--240},
  month         = may,
  __markedentry = {[romulo:6]},
  abstract      = {Microservice architecture is a cloud application design pattern that implies that the application is divided into a number of small independent services, each of which is responsible for implementing of a certain feature. The need for continuous integration of developed and/or modified microservices in the existing system requires a comprehensive validation of individual microservices and their co-operation as an ensemble with other microservices. In this paper, we would provide an analysis of existing methods of cloud applications testing and identify features that are specific to the microservice architecture. Based on this analysis, we will try to propose a validation methodology of the microservice systems.},
  doi           = {10.1109/MIPRO.2015.7160271},
  groups        = {Teste},
  keywords      = {cloud computing, software architecture, Mjolnirr platform case study, cloud application design pattern, microservices validation, Computer architecture, IEC standards, ISO standards, Security, Service-oriented architecture, Testing, Cloud computing, Microservices, PaaS, Services Oriented Architecture, testing, validation, rank3},
}

@InProceedings{Rahman2015,
  author        = {M. Rahman and J. Gao},
  title         = {A Reusable Automated Acceptance Testing Architecture for Microservices in Behavior-Driven Development},
  booktitle     = {Proc. IEEE Symp. Service-Oriented System Engineering},
  year          = {2015},
  pages         = {321--325},
  month         = mar,
  __markedentry = {[romulo:6]},
  abstract      = {Cloud Computing and Mobile Cloud Computing are reshaping the way applications are being developed and deployed due to their unique needs such as massive scalability, guaranteed fault tolerance, near zero downtime, etc. and also daunting challenges such as security, reliability, continuous deployment and update capability. Microservices architecture, where application is composed of a set of independently deployable services, is increasingly becoming popular due to its capability to address most of these needs and challenges. In recent years, the Behavior-Driven Development (BDD) has become one of the most popular agile software development processes, and frequently used in microservices development. The key to success of BDD is the executable acceptance tests that describe the expected behavior of a feature and its acceptance criteria in the form of scenarios using simple and business people readable syntax. The reusability, auditability, and maintainability become some of the major concerns when BDD test framework is applied for each microservice repository and no previous research addresses these concerns. In this paper, we present a reusable automated acceptance testing architecture to address all these concerns.},
  doi           = {10.1109/SOSE.2015.55},
  groups        = {Teste, Cloud},
  keywords      = {cloud computing, mobile computing, program testing, software prototyping, BDD test framework, agile software development process, behavior-driven development, mobile cloud computing, reusable automated acceptance testing architecture, Boolean functions, Business, Data structures, Maintenance engineering, Software, Testing, executable automated acceptance testing, Gherkin, functional testing, microservice, rank1},
}

@InProceedings{Kim2003,
  author        = {Sung Kim and F. B. Bastani and I-Ling Yen and Ing-Ray Chen},
  title         = {High-assurance synthesis of security services from basic microservices},
  booktitle     = {Proc. ISSRE 2003. 14th Int. Symp. Software Reliability Engineering},
  year          = {2003},
  pages         = {154--165},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {Computer systems are vulnerable to many different types of threats ranging from harmless mistakes in data entries to malicious attacks by computer hackers. Furthermore, the explosive growth of the Internet has introduced very sophisticated ways of compromising any computer system. Consequently, a great deal of time and effort has been spent on achieving computer network security. Most of the efforts to deal with computer security have emphasized the network security aspect (i.e., the focus so far has been on intruders from outside the system). However, there also exists a significant threat from "enemies within", e.g. attacks due to malicious code embedded in the software. Whether it is intentional or not, there are many software bugs that can potentially be the source of the information misusages. One approach for dealing with this issue is to certify component security and deduce system security from its components. The advantage of this method is that it is much simpler to validate a small component as compared with a large monolithic software system. In this paper, we define a general process that allows the system security to be decomposed into orthogonal aspects so that it is possible to rigorously certify the security of a system. The approach is illustrated for the security service for an e-mail application.},
  doi           = {10.1109/ISSRE.2003.1251039},
  groups        = {Seguranca},
  issn          = {1071-9458},
  keywords      = {Internet, certification, electronic mail, formal verification, object-oriented programming, security of data, component security certification, computer hackers, computer network security, computer systems, computer threats, e-mail application, information misusage, malicious attacks, malicious code embedding, microservices, monolithic software system, security service synthesis, software bugs, system security, Computer bugs, Computer hacking, Computer networks, Computer security, Data security, Embedded software, Explosives, Information security, Software systems, rank2},
}

@Article{Yousif2016,
  author        = {M. Yousif},
  title         = {Microservices},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {5},
  pages         = {4--5},
  month         = sep,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {The columns and departments in this issue address various topics related to microservices--that is, programs with a single task (or unit of work) that also include all the connectivity to the outside world as well as the runtime requirements to run the task. Microservices are well-suited for the many complex applications currently being built, from enterprise to Web-scale applications. In particular, microservices work well for new types of applications such as the Internet of Things, where single-function sensors and actuators are deployed in the field.},
  doi           = {10.1109/MCC.2016.101},
  groups        = {IoT},
  keywords      = {DevOps, Docker, cloud computing, containers, editor in chief, microservices, rank4},
}

@Article{Thoenes2015,
  author        = {J. Thönes},
  title         = {Microservices},
  journal       = {IEEE Software},
  year          = {2015},
  volume        = {32},
  number        = {1},
  pages         = {116},
  month         = jan,
  issn          = {0740-7459},
  __markedentry = {[romulo:2]},
  abstract      = {In this excerpt from Software Engineering Radio, Johannes Th{\"{o}}nes talks with James Lewis, principal consultant at ThoughtWorks, about microservices. They discuss microservices' recent popularity, architectural styles, deployment, size, technical decisions, and consumer-driven contracts. They also compare microservices to service-oriented architecture and wrap up the episode by talking about key figures in the microservice community and standing on the shoulders of giants. The Web extra at http://www.se-radio.net/2014/10/episode-213-james-lewis-on-microservices is an audio recording of Tobias Kaatz speaking with James Lewis, principal consultant at ThoughtWorks, about microservices. They discuss microservices' recent popularity, architectural styles, deployment, size, technical decisions, and consumer-driven contracts. They also compare microservices to service-oriented architecture and wrap up the episode by talking about key figures in the microservice community and standing on the shoulders of giants.},
  doi           = {10.1109/MS.2015.11},
  groups        = {Experiencia},
  keywords      = {Interviews, Service oriented architecture, Software architecture, Software engineering, SE Radio, architecture, enterprise service bus, http, microservice, service-oriented architecture, software engineering, rank5},
}

@Article{Xu2017,
  author        = {M. Xu and A. Vahid Dastjerdi and R. Buyya},
  title         = {Energy Efficient Scheduling of Cloud Application Components with Brownout},
  journal       = {IEEE Transactions on Sustainable Computing},
  year          = {2017},
  volume        = {PP},
  number        = {99},
  pages         = {1},
  issn          = {2377-3782},
  __markedentry = {[romulo:6]},
  abstract      = {It is common for cloud data centers meeting unexpected loads like request bursts, which may lead to overloaded situation and performance degradation. Dynamic Voltage Frequency Scaling and VM consolidation have been proved effective to manage overloads. However, they cannot function when the whole data center is overloaded. Brownout provides a promising direction to avoid overloads through configuring applications to temporarily degrade user experience. Additionally, brownout can also be applied to reduce data center energy consumption. As a complementary option for Dynamic Voltage Frequency Scaling and VM consolidation, our combined brownout approach reduces energy consumption through selectively and dynamically deactivating application optional components, which can also be applied to self-contained microservices. The results show that our approach can save more than 20\% energy consumption and there are trade-offs between energy saving and discount offered to users.},
  doi           = {10.1109/TSUSC.2017.2661339},
  groups        = {Cloud},
  keywords      = {Algorithm design and analysis, Cloud computing, Energy consumption, Engines, Heuristic algorithms, Resource management, Servers, Application Component, Brownout, Cloud Data Centers, Energy Efficient, Microservices, rank2},
}

@Article{Sill2016a,
  author        = {A. Sill},
  title         = {Hardware Analogies to Cloud Software Standards Development},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {6},
  pages         = {84--88},
  month         = nov,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Datacenter automation has entered the modern era through definition and standardization of underlying services. This column explores the basis for these trends in both modern and historical standards, and sets a direction for microservices deployment in datacenters.},
  doi           = {10.1109/MCC.2016.133},
  keywords      = {cloud computing, computer centres, software standards, cloud software standard development, data center automation, hardware analogies, historical standards, microservice deployment, Computers, Connectors, Hardware, Industries, Software, Standards, Technological innovation, architecture, automation, cloud, datacenters, design, microservices, networks, standards, rank2},
}

@InProceedings{Bandura2016,
  author        = {A. Bandura and N. Kurilenko and M. Mazzara and V. Rivera and L. Safina and A. Tchitchigin},
  title         = {Jolie Community on the Rise},
  booktitle     = {Proc. IEEE 9th Int. Conf. Service-Oriented Computing and Applications (SOCA)},
  year          = {2016},
  pages         = {40--43},
  month         = nov,
  __markedentry = {[romulo:]},
  abstract      = {Jolie is a programming language that follows the microservices paradigm. As an open source project, it has built a community of developers worldwide - both in the industry as well as in academia - taken care of the development, continuously improved its usability, and therefore broadened the adoption. In this paper, we present some of the most recent results and work in progress that has been made within our research team.},
  doi           = {10.1109/SOCA.2016.16},
  groups        = {Linguagem},
  keywords      = {Computer languages, Documentation, Indexes, Ports (Computers), Protocols, Semantics, Syntactics, Jolie, Microservices, Programming languages, Software architecture, rank5},
}

@InProceedings{Ruiu2016,
  author        = {P. Ruiu and A. Scionti and J. Nider and M. Rapoport},
  title         = {Workload Management for Power Efficiency in Heterogeneous Data Centers},
  booktitle     = {Proc. and Software Intensive Systems (CISIS) 2016 10th Int. Conf. Complex, Intelligent},
  year          = {2016},
  pages         = {23--30},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {The cloud computing paradigm has recently emerged as a convenient solution for running different workloads on highly parallel and scalable infrastructures. One major appeal of cloud computing is its capability of abstracting hardware resources and making them easy to use. Conversely, one of the major challenges for cloud providers is the energy efficiency improvement of their infrastructures. Aimed at overcoming this challenge, heterogeneous architectures have started to become part of the standard equipment used in data centers. Despite this effort, heterogeneous systems remain difficult to program and manage, while their effectiveness has been proven only in the HPC domain. Cloud workloads are different in nature and a way to exploit heterogeneity effectively is still lacking. This paper takes a first step towards an effective use of heterogeneous architectures in cloud infrastructures. It presents an in-depth analysis of cloud workloads, highlighting where energy efficiency can be obtained. The microservices paradigm is then presented as a way of intelligently partitioning applications in such a way that different components can take advantage of the heterogeneous hardware, thus providing energy efficiency. Finally, the integration of microservices and heterogeneous architectures, as well as the challenge of managing legacy applications, is presented in the context of the OPERA project.},
  doi           = {10.1109/CISIS.2016.107},
  groups        = {Performance, Cloud, Ferramenta},
  keywords      = {cloud computing, computer centres, power aware computing, HPC domain, OPERA project, cloud computing paradigm, cloud providers, cloud workloads, energy efficiency improvement, hardware resource abstracting, heterogeneous architectures, heterogeneous data centers, legacy applications, microservices, power efficiency, workload management, Cloud computing, Computer architecture, Cooling, Hardware, Power demand, Programming, Servers, heterogeneous data center, rank3},
}

@InProceedings{Callegati2016,
  author        = {F. Callegati and S. Giallorenzo and A. Melis and M. Prandini},
  title         = {Data security issues in MaaS-enabling platforms},
  booktitle     = {Proc. IEEE 2nd Int. Forum Research and Technologies for Society and Industry Leveraging a better tomorrow (RTSI)},
  year          = {2016},
  pages         = {1--5},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Mobility as a Service takes the concept of XaaS to transportation: a MaaS provider shall merge transport options from different mobility providers, seamlessly handling the whole experience of traveling, from providing information, to travel planning, and payments handling. To effectively support the creation of a market of MaaS providers, we envision the creation of ICT infrastructures based on microservices, a modern and renowned development model that fosters the creation of an ecosystem of reusable components. The flexibility of such platforms is their key advantage, yet it poses many security issues. In this paper, we look at these problems through the lens of our experience on one of such platforms, called SMAll. We classify the most relevant vulnerabilities related to data reliability, integrity, and authenticity, and we investigate directions for their mitigation.},
  doi           = {10.1109/RTSI.2016.7740624},
  groups        = {Cloud, Seguranca, Outra Area},
  keywords      = {cloud computing, data integrity, mobile computing, security of data, ICT infrastructures, MaaS-enabling platforms, SMAll, XaaS, data authenticity, data reliability, data security, ecosystem, microservices, mobility as a service, mobility providers, payments handling, reusable components, transport options, travel planning, Authentication, Computer architecture, Context, Industries, Planning, Real-time systems, Integrity, MaaS, Microservices, Provenance, Reputation, rank1},
}

@InProceedings{Melis2016,
  author        = {A. Melis and S. Mirri and C. Prandi and M. Prandini and P. Salomoni and F. Callegati},
  title         = {CrowdSensing for smart mobility through a service-oriented architecture},
  booktitle     = {Proc. IEEE Int. Smart Cities Conf. (ISC2)},
  year          = {2016},
  pages         = {1--2},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Crowdsensing is a powerful approach to build representations of specific aspects of reality which are of interest for citizens in smart cities, and in particular for people with special needs. In this work, we present an application of the microservice paradigm to create a mobility services platform. By exposing each part of the process as a microservice, we achieve the ability of developing applications as orchestration of available components. Moreover, we leverage the possibility of sharing data between different applications in a controlled environment.},
  doi           = {10.1109/ISC2.2016.7580861},
  groups        = {Experiencia},
  keywords      = {mobile computing, service-oriented architecture, smart cities, crowdsensing, microservice paradigm, smart mobility, Biological system modeling, Conferences, Prototypes, Quality management, Reliability, Sensors, Smart cities, Data Quality, MaaS, Microservices, Sensing, rank3},
}

@InProceedings{Carter2015,
  author        = {B. Carter},
  title         = {Growing Software Applications by Incremental Development of Heterogeneous Micro-Applications Using Cellular Regeneration Concepts},
  booktitle     = {Proc. Annual Global Online Conf. Information and Computer Technology (GOCICT)},
  year          = {2015},
  pages         = {1--5},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {In this paper, the concepts of growing software applications by incremental development of heterogeneous micro-applications using cellular regeneration concepts are explored. The proposal is the move from homogeneous monolithic architectures to heterogeneous micro-architectures, to allow for application evolution. The focus is on growing legacy applications that will evolve to remain healthy. Cellular regeneration concepts are used to show that applications should always be regenerating, like cells living in an organism, to become resilient to events that cause disturbance and damage. Understanding regeneration can give insights into growing computational systems that are more resilient. A definition for micro-architectures and comparisons on how such an architecture differs from typical monolithic architectures are given. Concepts to allow applications to adapt to new and changing business and scientific computational needs are designed. Development and operation complexity is addressed to handle the increase in activity and tasks. We conclude with future states for micro-applications.},
  doi           = {10.1109/GOCICT.2015.9},
  keywords      = {cellular automata, service-oriented architecture, cellular regeneration concepts, heterogeneous micro applications, heterogeneous micro-architectures, homogeneous monolithic architectures, service oriented architecture, software applications, typical monolithic architectures, Animals, Business, Computer architecture, Ecosystems, Servers, Software, Stem cells, SOA, cellular, heterogeneous, micro-application, micro-architecture, microservices, monolith, regeneration, services, rank4},
}

@InProceedings{Villamizar2016,
  author        = {M. Villamizar and O. Garcés and L. Ochoa and H. Castro and L. Salamanca and M. Verano and R. Casallas and S. Gil and C. Valencia and A. Zambrano and M. Lang},
  title         = {Infrastructure Cost Comparison of Running Web Applications in the Cloud Using AWS Lambda and Monolithic and Microservice Architectures},
  booktitle     = {Proc. Cloud and Grid Computing (CCGrid) 2016 16th IEEE/ACM Int. Symp. Cluster},
  year          = {2016},
  pages         = {179--182},
  month         = may,
  __markedentry = {[romulo:6]},
  abstract      = {Large Internet companies like Amazon, Netflix, and LinkedIn are using the microservice architecture pattern to deploy large applications in the cloud as a set of small services that can be developed, tested, deployed, scaled, operated and upgraded independently. However, aside from gaining agility, independent development, and scalability, infrastructure costs are a major concern for companies adopting this pattern. This paper presents a cost comparison of a web application developed and deployed using the same scalable scenarios with three different approaches: 1) a monolithic architecture, 2) a microservice architecture operated by the cloud customer, and 3) a microservice architecture operated by the cloud provider. Test results show that microservices can help reduce infrastructure costs in comparison to standard monolithic architectures. Moreover, the use of services specifically designed to deploy and scale microservices reduces infrastructure costs by 70\% or more. Lastly, we also describe the challenges we faced while implementing and deploying microservice applications.},
  doi           = {10.1109/CCGrid.2016.37},
  groups        = {Ferramenta, Cloud, Experiencia},
  keywords      = {Web services, cloud computing, software architecture, AWS lambda, Amazon, Internet companies, LinkedIn, Netflix, Web applications, Web service, cloud customer, cloud provider, infrastructure cost comparison, microservice architecture pattern, monolithic architecture, Cloud computing, Companies, Computer architecture, Logic gates, Service-oriented architecture, Time factors, AWS Lambda, Amazon Web Services, microservice architecture, microservices, scalable applications, service oriented architectures, software engineering, rank5},
}

@Article{Ebert2016,
  author        = {C. Ebert and G. Gallardo and J. Hernantes and N. Serrano},
  title         = {DevOps},
  journal       = {IEEE Software},
  year          = {2016},
  volume        = {33},
  number        = {3},
  pages         = {94--100},
  month         = may,
  issn          = {0740-7459},
  __markedentry = {[romulo:6]},
  abstract      = {Building on lean and agile practices, DevOps means end-to-end automation in software development and delivery. Hardly anybody will be able to approach it with a cookbook-style approach, but most developers will benefit from better connecting the previously isolated silos of development and operations. Many DevOps tools exist that can help them do this.},
  doi           = {10.1109/MS.2016.68},
  groups        = {DevOps},
  keywords      = {software engineering, DevOps, cookbook-style approach, software delivery, software development, Automation, Cloud computing, DSL, Java, Monitoring, Production, AWS, Amazon Web Services, Ansible, Bamboo, Cacti, Chef, Gradle, Graylog2, Jenkins, Logging, Loggly, Maven, Nagios, New Relic, Puppet, TeamCity, apache Ant, configuration management, continuous integration, microservices, rank4},
}

@InProceedings{Brunner2015,
  author        = {S. Brunner and M. Blöchlinger and G. Toffetti and J. Spillner and T. M. Bohnert},
  title         = {Experimental Evaluation of the Cloud-Native Application Design},
  booktitle     = {Proc. IEEE/ACM 8th Int. Conf. Utility and Cloud Computing (UCC)},
  year          = {2015},
  pages         = {488--493},
  month         = dec,
  __markedentry = {[romulo:6]},
  abstract      = {Cloud-Native Applications (CNA) are designed to run on top of cloud computing infrastructure services with inherent support for self-management, scalability and resilience across clustered units of application logic. Their systematic design is promising especially for recent hybrid virtual machine and container environments for which no dominant application development model exists. In this paper, we present a case study on a business application running as CNA and demonstrate the advantages of the design experimentally. We also present Dynamite, an application auto-scaler designed for containerised CNA. Our experiments on a Vagrant host, on a private OpenStack installation and on a public Amazon EC2 testbed show that CNA require little additional engineering.},
  doi           = {10.1109/UCC.2015.87},
  groups        = {Cloud, Experiencia, Ferramenta},
  keywords      = {cloud computing, operating systems (computers), virtual machines, CNA, application logic, business application, cloud computing infrastructure services, cloud native application design, container environments, hybrid virtual machine, private OpenStack installation, Cloud computing, Containers, Measurement, Monitoring, Scalability, Web servers, cloud development, cloud native, elasticity, microservices, monitoring, resilience, scalability, self-management, rank5},
}

@InProceedings{Malavalli2015,
  author        = {D. Malavalli and S. Sathappan},
  title         = {Scalable microservice based architecture for enabling DMTF profiles},
  booktitle     = {Proc. 11th Int. Conf. Network and Service Management (CNSM)},
  year          = {2015},
  pages         = {428--432},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {This paper proposes an architecture for implementing DMTF management Profiles in middleware layer of a management console, using microservices. Microservices is a software architecture style, gaining popularity for developing Internet scale applications. This paper will also provide a comparison with the current prevalent method of design. This paper will also discuss how this microservice can be exposed utilizing REST thus further making it scalable, lightweight etc. This scalable microservice in turn can interact with the managed device using either SOAP (as defined in DASH or SMASH) or REST (as defined in Redfish).},
  doi           = {10.1109/CNSM.2015.7367395},
  groups        = {Comunicacao},
  keywords      = {middleware, software architecture, DMTF profiles, middleware layer, scalable microservice based architecture, Decision support systems, Architecture, DASH, DMTF Profiles, Enterprise, JSON, Manageability, Microservices, REST, SOA, SOAP, Webservices, XML, rank3},
}

@InProceedings{Villamizar2015,
  author        = {M. Villamizar and O. Garcés and H. Castro and M. Verano and L. Salamanca and R. Casallas and S. Gil},
  title         = {Evaluating the monolithic and the microservice architecture pattern to deploy web applications in the cloud},
  booktitle     = {Proc. 10th Computing Colombian Conf. (10CCC)},
  year          = {2015},
  pages         = {583--590},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Cloud computing provides new opportunities to deploy scalable application in an efficient way, allowing enterprise applications to dynamically adjust their computing resources on demand. In this paper we analyze and test the microservice architecture pattern, used during the last years by large Internet companies like Amazon, Netflix and LinkedIn to deploy large applications in the cloud as a set of small services that can be developed, tested, deployed, scaled, operated and upgraded independently, allowing these companies to gain agility, reduce complexity and scale their applications in the cloud in a more efficient way. We present a case study where an enterprise application was developed and deployed in the cloud using a monolithic approach and a microservice architecture using the Play web framework. We show the results of performance tests executed on both applications, and we describe the benefits and challenges that existing enterprises can get and face when they implement microservices in their applications.},
  doi           = {10.1109/ColumbianCC.2015.7333476},
  groups        = {Cloud, Experiencia},
  keywords      = {cloud computing, software architecture, Internet companies, Play Web framework, Web applications, enterprise applications, microservice architecture pattern, monolithic architecture pattern, Cloud computing, Companies, Complexity theory, Computer architecture, Service-oriented architecture, IaaS, PaaS, SOA, continuous delivery, infrastructure as a services, microservice architecture, microservices, platform as a service, scalable applications, service oriented architectures, software engineering, rank4},
}

@Article{Anderson2015,
  author        = {C. Anderson},
  title         = {Docker [Software engineering]},
  journal       = {IEEE Software},
  year          = {2015},
  volume        = {32},
  number        = {3},
  pages         = {102--c3},
  month         = may,
  issn          = {0740-7459},
  __markedentry = {[romulo:6]},
  abstract      = {In episode 217 of Software Engineering Radio, host Charles Anderson talks with James Turnbull, a software developer and security specialist who's vice president of services at Docker. Lightweight Docker containers are rapidly becoming a tool for deploying microservice-based architectures.},
  doi           = {10.1109/MS.2015.62},
  groups        = {Deploy},
  keywords      = {Interviews, Software development, Software engineering, Virtual machining, Docker, Docker containers, James Turnbull, SE Radio, Software Engineering Radio, microservices, rank5},
}

@Article{Zhu2016,
  author        = {L. Zhu and L. Bass and G. Champlin-Scharff},
  title         = {DevOps and Its Practices},
  journal       = {IEEE Software},
  year          = {2016},
  volume        = {33},
  number        = {3},
  pages         = {32--34},
  month         = may,
  issn          = {0740-7459},
  __markedentry = {[romulo:6]},
  abstract      = {DevOps aims to reduce the time between committing a system change and placing the change into normal production, while ensuring high quality. The article topics in this theme issue include using DevOps to migrate to microservices, adopting DevOps, and DevOps tools. The Web extra at https://youtu.be/NzX6JmwDS0s is an audio recording of Davide Falessi speaking with Len Bass and George Champlin-Scharff about the IEEE Software May/June 2016 theme issue on DevOps and its practices.},
  doi           = {10.1109/MS.2016.81},
  groups        = {DevOps},
  keywords      = {DevOps, continuous delivery, continuous deployment, microservices, software development, software engineering, rank5},
}

@InProceedings{Sokol2016,
  author        = {A. Sokół and K. Skowrońska and A. Skowroński},
  title         = {Talk to cloud},
  booktitle     = {Proc. 7th IEEE Int. Conf. Cognitive Infocommunications (CogInfoCom)},
  year          = {2016},
  pages         = {000017--000018},
  month         = oct,
  __markedentry = {[romulo:6]},
  abstract      = {Improving cognitive communication between end user and mobile app using various micro-services from IBM BlueMix cloud - based on banking use cases.},
  doi           = {10.1109/CogInfoCom.2016.7804517},
  keywords      = {cloud computing, mobile computing, natural language processing, IBM BlueMix cloud, banking use cases, cognitive communication, microservices, mobile app, Artificial intelligence, Banking, Cloud computing, Computers, Mobile communication, Writing, rank2},
}

@InProceedings{Bae2016,
  author        = {J. Bae and C. Kim and J. Kim},
  title         = {Automated deployment of SmartX IoT-cloud services based on continuous integration},
  booktitle     = {Proc. Int. Conf. Information and Communication Technology Convergence (ICTC)},
  year          = {2016},
  pages         = {1076--1081},
  month         = oct,
  __markedentry = {[romulo:6]},
  abstract      = {Since convergence of IoT and Cloud, IoT-Cloud, has potential to provide futuristic IT services, there are many research about IoT-Cloud service. To keep pace with trend, we are studying and developing IoT-Cloud service. Goal of this service is reducing power consumption in server room. To design this service, we use microservice. Since it is set of inter-connection of functions, frequent verification is important. Therefore, we adopt Continuous Integration (CI). It is designed to build and running service in testbed automatically. It reduces integration effort. In this paper, we introduce our experience in automated deployment of SmartX IoT-Cloud services based on CI.},
  doi           = {10.1109/ICTC.2016.7763372},
  groups        = {IoT, Cloud},
  keywords      = {Internet of Things, cloud computing, network servers, power aware computing, CI, IT services, automated SmartX IoT-cloud service deployment, continuous integration, microservices, power consumption, server room, Cloud, Continuous Integration, DevOps, IoT-Cloud, IoT-Cloud service, rank2},
}

@Article{Britto2016,
  author        = {R. Britto and D. Smite and L. O. Damm},
  title         = {Software Architects in Large-Scale Distributed Projects: An Ericsson Case Study},
  journal       = {IEEE Software},
  year          = {2016},
  volume        = {33},
  number        = {6},
  pages         = {48--55},
  month         = nov,
  issn          = {0740-7459},
  __markedentry = {[romulo:6]},
  abstract      = {Software architects are key assets for successful development projects. However, not much research has investigated the challenges they face in large-scale distributed projects. So, researchers investigated how architects at Ericsson were organized, their roles and responsibilities, and the effort they spent guarding and governing a large-scale legacy product developed by teams at multiple locations. Despite recent trends such as microservices and agile development, Ericsson had to follow a more centralized approach to deal with the challenges of scale, distribution, and monolithic architecture of a legacy software product. So, the architectural decisions were centralized to a team of architects. The team extensively used code reviews to not only check the code's state but also reveal defects that could turn into maintainability problems. The study results also suggest that the effort architects spend designing architecture, guarding its integrity and evolvability, and mentoring development teams is directly related to team maturity. In addition, significant investment is needed whenever new teams and locations are onboarded.},
  doi           = {10.1109/MS.2016.146},
  groups        = {Experiencia},
  keywords      = {distributed processing, personnel, software architecture, software development management, software maintenance, Ericsson, agile development trend, large-scale distributed projects, legacy software product, microservices trend, software architects, Atmospheric measurements, Complexity theory, Computer architecture, Mentoring, Particle measurements, Product development, Software architecture, global software engineering, large-scale software development, software development, software engineering, rank3},
}

@InProceedings{Kozmirchuk2016,
  author        = {A. Kozmirchuk and A. Kokorev and V. Nesterov and E. Mikhailova},
  title         = {PostgreSQL service with backup and recovery for cloud foundry},
  booktitle     = {Proc. Social Media and Web (ISMW FRUCT) 2016 Int. FRUCT Conf. Intelligence},
  year          = {2016},
  pages         = {1--6},
  month         = aug,
  __markedentry = {[romulo:6]},
  abstract      = {Cloud Foundry is open source PaaS project, designed for the application developers to get them rid of the problems with the hardware. Cloud Foundry provides users with the ability to run applications in the container with different micro-services giving access to database management systems (DBMS), middleware software, development and testing tools. Each DBMS needs a broker that implements the main scenario of interaction with the applications: work with the database. This paper presents an architecture of the service broker providing the DBMS with the capabilities of backup and data recovery. The broker is implemented on PostgreSQL based on the proposed architecture. The broker gives two kinds of storage options: the local (temporary) storage of data and storage in the cloud. the designed archietecture can be easily adapted to different DBMS. The approach contains various advantages: ease of development, a weak dependence on the internal structure of the DBMS, a clear task distribution between the modules.},
  doi           = {10.1109/FRUCT.2016.7584766},
  groups        = {Ferramenta, Cloud},
  keywords      = {SQL, back-up procedures, cloud computing, database management systems, middleware, public domain software, software architecture, software tools, storage management, system recovery, DBMS, PostgreSQL service, backup, cloud foundry, cloud storage, data recovery, data storage, development tools, local temporary storage, microservices, middleware software, open source PaaS project, service broker architecture, testing tools, rank4},
}

@InProceedings{Nagarajan2016,
  author        = {A. Nagarajan and A. Vaddadi},
  title         = {Automated Fault-Tolerance Testing},
  booktitle     = {Proc. Verification and Validation Workshops (ICSTW) 2016 IEEE Ninth Int. Conf. Software Testing},
  year          = {2016},
  pages         = {275--276},
  month         = apr,
  __markedentry = {[romulo:6]},
  abstract      = {Software Fault Tolerance is an ability of computer software to continue its normal operation despite the presence of system or hardware faults. Most companies are moving towards a microservices-based architecture where complex applications are developed with a suite of small services, each of which communicates using some common protocols like Hypertext Transfer Protocol (HTTP). While this architecture enables agility in software development and go-to-market, it poses a critical challenge of assessing fault tolerance and resiliency of the overall system. A failure in one of the dependent services can cause an unexpected impact on the upstream services causing severe customer facing issues. Such issues are a result of lack of resiliency in the architecture of the system. There is a need for an automated tool to be able to understand the service architecture, topology, and be able to inject faults to assess fault tolerance and resiliency of the system. In this paper, we present Screwdriver -- a new automated solution developed at Groupon to address this need.},
  doi           = {10.1109/ICSTW.2016.34},
  groups        = {Teste},
  keywords      = {computer software, hypermedia, program testing, software architecture, software fault tolerance, transport protocols, Groupon, HTTP, Screwdriver, automated fault-tolerance testing, go-to-market, hypertext transfer protocol, microservices-based architecture, software development, Computer architecture, Conferences, Fault tolerance, Fault tolerant systems, Monitoring, Testing, Topology, Chaos Monkey, Fault-tolerance testing, resiliency testing, testing tools, rank2},
}

@InProceedings{Pham2016,
  author        = {M. Pham and D. B. Hoang},
  title         = {SDN applications - The intent-based Northbound Interface realisation for extended applications},
  booktitle     = {Proc. IEEE NetSoft Conf. and Workshops (NetSoft)},
  year          = {2016},
  pages         = {372--377},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {The Northbound Interface (NBI) plays a crucial role in promoting the adoption of SDN as it allows developers the freedom of developing their revenue-generating applications without being affected and constrained by the complexities of the underlying networks. To do so the NBI has to allow applications to express their requirements and constraints in their own application specific language, and the SDN controller to translate those requirements into SDN network specific language for provisioning network resources and services to satisfy the application requirements. The intent-based NBI is born from this consideration and the Open Networking Foundation (ONF) provides principles and guidelines to build such an intent-based NBI. However, these principles do not lend themselves readily to the design and practical realization of an intent-based NBI for extended classes of business-like network applications. This paper introduces a solution and its initial implementation in the form of a novel architecture for realizing the intent-based NBI. The new solution exploits the modularized and reuse features of the micro services and service oriented architectures.},
  doi           = {10.1109/NETSOFT.2016.7502469},
  keywords      = {application program interfaces, service-oriented architecture, software defined networking, ONF, Open Networking Foundation, SDN controller, SDN network specific language, application requirements, application specific language, business-like network applications, intent-based NBI, intent-based northbound interface realisation, microservices, network resources, revenue-generating applications, service oriented architectures, Business, Computer architecture, Context, Databases, Network topology, Programming, Service-oriented architecture, NBI application architecture, Software defined network, domain driven design, micro-service architecture, rank1},
}

@InProceedings{Chen2016,
  author        = {H. M. Chen and R. Kazman and S. Haziyev and V. Kropov and D. Chtchourov},
  title         = {Big Data as a Service: A Neo-Metropolis Model Approach for Innovation},
  booktitle     = {Proc. 49th Hawaii Int. Conf. System Sciences (HICSS)},
  year          = {2016},
  pages         = {5458--5467},
  month         = jan,
  __markedentry = {[romulo:6]},
  abstract      = {Big data as a Service (BDaaS) provides a viable alternative to circumvent many obstacles in implementing a big data strategy. Many BDaaS vendors are providing cloud platforms utilizing microservices and DevOps technologies to enable big data analytics for organizations that seek cost-effective and elastic deployments. However, existing models of BDaaS are mostly proprietary, closed-world operations and this can limit the potential for innovation. In this article, we argue for a new model called the Neo-Metropolis model -- a variant of the Metropolis model -- that offers an organized, coherent set of open-world innovation opportunities for vendors as well as for the platform's edge customers. We identify Neo-Metropolis model characteristics and illustrate Neo-Metropolis principles for developing BDaaS using a case study of Cisco's Intercloud Analytics platform. The implications of the Neo-Metropolis model are far beyond just BDaaS and it is foreseen to be an important model for future service platform development.},
  doi           = {10.1109/HICSS.2016.674},
  groups        = {Cloud},
  issn          = {1530-1605},
  keywords      = {Big Data, cloud computing, innovation management, BDaaS, Big Data analytics, Big Data as a service, DevOps technologies, cost-effective deployments, elastic deployments, intercloud analytics platform, microservices, neo-metropolis model approach, neo-metropolis principles, open-world innovation opportunities, organizations, service platform development, Big data, Cloud computing, Computational modeling, Data models, Market research, Technological innovation, Intercloud, Metropolis Model, Neo-Metropolis model, Service platform, rank1},
}

@InProceedings{Chen2015,
  author        = {N. Chen and X. Li and R. Deters},
  title         = {Collaboration amp; Mobile Cloud-Computing: Using CoAP to Enable Resource-Sharing between Clouds of Mobile Devices},
  booktitle     = {Proc. IEEE Conf. Collaboration and Internet Computing (CIC)},
  year          = {2015},
  pages         = {119--124},
  month         = oct,
  __markedentry = {[romulo:6]},
  abstract      = {As the number of mobile devices per user increases, the need to connect/combine them grows. Current approaches focus on the use of cloud-hosted backend services which allow file and app-state synchronization but fail in providing true resource sharing among mobile devices. To enable true resource/service sharing, the mobile devices of a single user should be combined into a cloud of cooperating mobile devices. Instead of accessing the resources/services of an individual device, a user should be able to seamlessly access the combined resources/services of his/her device cloud. Enabling seamless access to the resources/services hosted on different mobile devices is therefore a key challenge. Exposing the resources/services of each mobile devices within the user's device cloud via Restful micro-services, is one possible approach. This paper focusses on the use of the IoT protocol CoAP as an application layer protocol. To minimize the energy costs of communication, it was necessary to replace CoAP's standard transport protocol (UDP) with BLE 4.1. This paper presents the performance of the CoAP protocol using BLE 4.1 on Android Lollipop.},
  doi           = {10.1109/CIC.2015.39},
  groups        = {Outra Area},
  keywords      = {Android (operating system), Internet of Things, Web services, cloud computing, mobile computing, mobile handsets, resource allocation, synchronisation, transport protocols, Android Lollipop, BLE 4.1, Bluetooth Low Energy, CoAP protocol, IoT protocol CoAP, RESTful microservices, UDP, app-state synchronization, application layer protocol, cloud-hosted backend services, file synchronization, mobile cloud-computing, mobile devices, resource sharing, service sharing, user device cloud, Cloud computing, Context, Delays, Message systems, Mobile communication, Mobile handsets, Protocols, CoAP, Device Cloud, Mobile Cloud-Computing, rank1},
}

@InProceedings{Chen2015a,
  author        = {H. M. Chen and R. Kazman and S. Haziyev and V. Kropov and D. Chtchourov},
  title         = {Architectural Support for DevOps in a Neo-Metropolis BDaaS Platform},
  booktitle     = {Proc. IEEE 34th Symp. Reliable Distributed Systems Workshop (SRDSW)},
  year          = {2015},
  pages         = {25--30},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Big data as a Service (BDaaS) provides a viable strategy for organizations to implement scalable, tailorable big data infrastructure and applications built on this infrastructure. New trends in the BDaaS market are moving toward an open world model -- what we call the Neo-Metropolis model -- for developing BDaaS platforms. The key to the success of such large-scale technology-agnostic platforms, we posit, is an architectural strategy revolving around microservices and DevOps. This article presents the results of an action research with a Neo-Metropolis BDaaS vendor and illustrates how architectural support for DevOps is critical in achieving desired system qualities and enabling platform success. This research contributes to illuminate best practices of DevOps, and to validate and augment a set of DevOps tactics previously developed, while adding and recategorizing new instances of well-established architectural tactics.},
  doi           = {10.1109/SRDSW.2015.14},
  groups        = {DevOps},
  keywords      = {Big Data, software architecture, BDaaS market, Big Data as a service, Big Data infrastructure, DevOps tactics, architectural strategy, architectural support, architectural tactics, large-scale technology-agnostic platforms, microservices, neo-metropolis BDaaS platform, neo-metropolis BDaaS vendor, neo-metropolis model, organizations, system qualities, Big data, Computer architecture, Kernel, Market research, Organizations, Production, Testing, big data, tactics, rank1},
}

@InProceedings{Tchoubraev2015,
  author        = {D. Tchoubraev and D. Wiczynski},
  title         = {Swiss TSO integrated operational planning, optimization and ancillary services system},
  booktitle     = {Proc. IEEE Eindhoven PowerTech},
  year          = {2015},
  pages         = {1--6},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {This paper discusses the problems of design and implementation of complex set of interconnected online and offline planning, optimization and monitoring tools of Swiss Transmission System Operator Swissgrid. After analyzing the requirements and challenges of the system, the paper presents its realization concept, as well as implementation results and the future plans. Solution under discussion widely uses microservices for network modelling and analysis and modern integration techniques to provide system with high flexibility and reusability, having shorter time-to-operation cycle and lower engineering costs than systems based on traditional approach.},
  doi           = {10.1109/PTC.2015.7232492},
  groups        = {Experiencia},
  keywords      = {power grids, power system interconnection, power transmission planning, Swiss TSO integrated operational planning, Swiss Transmission System Operator Swissgrid, ancillary services system, engineering costs, interconnected offline planning, interconnected online planning, microservices, modern integration techniques, monitoring tools, network modelling, time-to-operation cycle, Business, Data visualization, Europe, Monitoring, Optimization, Planning, Security, OPC, OPF, Operational planning, Power system planning, Redispatch, SCADA Systems, rank1},
}

@InProceedings{Vianden2014,
  author        = {M. Vianden and H. Lichter},
  title         = {Lessons Learned on Systematic Metric System Development at a Large IT Service Provider},
  booktitle     = {Proc. 21st Asia-Pacific Software Engineering Conf},
  year          = {2014},
  volume        = {2},
  pages         = {47--50},
  month         = dec,
  __markedentry = {[romulo:6]},
  abstract      = {Even though a lot of work was contributed to extend and enhance metric requirements gathering techniques, metric systems are often developed chaotically and a solid dedicated metric system engineering approach is still missing. This paper provides our experiences at developing a metric system together with a large IT service provider and presents an overview on our reference architecture for enterprise measurement infrastructures. Furthermore we give some insights into our metric systems engineering approach which integrates software engineering best practices, modern ideas like micro services, and well established metric related techniques such as GQM.},
  doi           = {10.1109/APSEC.2014.92},
  issn          = {1530-1362},
  keywords      = {software engineering, GQM, enterprise measurement infrastructures, large IT service provider, metric requirements gathering techniques, microservices, reference architecture, solid dedicated engineering approach, systematic metric system development, Computer architecture, Monitoring, Prototypes, Software, Software measurement, Solids, Field Study, Metric Systems, Process Experience, Reference Architecture, rank1},
}

@InProceedings{Doolhur2013,
  author        = {N. Doolhur and G. Suddul and R. Foogooa and M. Richomme},
  title         = {An open {API} to monetize mobile micro-services for emerging countries},
  booktitle     = {Proc. Africon},
  year          = {2013},
  pages         = {1--4},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Mobile payment is becoming very important throughout the world, especially in emerging countries. Innovative micro-services involving mobile payment become possible only when technical solutions such as web APIs are made available to developers. This enables a fruitful collaboration between powerful telecom operators and nimble {\textquotedblleft}technopreneurs{\textquotedblright}. The Orange Group is a pioneer with its Emerginov platform aimed at revenue sharing between innovators and telecom operators. Orange Group also has a mobile payment solution called Orange Money which, for security reasons, could not be made available to developers. This research has enriched the Emerginov platform by developing an open Web API for securely accessing this mobile payment system. It is expected that the results of this research attract developers to provide innovative micro-services centered around Orange Money.},
  doi           = {10.1109/AFRCON.2013.6757819},
  groups        = {Outra Area},
  issn          = {2153-0025},
  keywords      = {Web services, application program interfaces, mobile commerce, security of data, Emerginov platform, Orange Group, Orange Money, emerging countries, innovative microservices, mobile payment solution, open Web API, revenue sharing, technopreneurs, telecom operators, web API, Africa, Biological system modeling, Business, Collaboration, Mobile communication, Telecommunications, mobile micro-services, mobile payment, rank1},
}

@InProceedings{Deussen2008,
  author        = {P. H. Deussen and E. Höfig and A. Manzalini},
  title         = {An Ecological Perspective on Future Service Environments},
  booktitle     = {Proc. Second IEEE Int. Conf. Self-Adaptive and Self-Organizing Systems Workshops},
  year          = {2008},
  pages         = {37--42},
  month         = oct,
  __markedentry = {[romulo:6]},
  abstract      = {This paper addresses a business scenario based on so-called tradable micro-services which is intended to explain the dynamics of a market to which actors contribute both as consumers and providers of telecommunication and Web based services. We argue that a service evolution is possible with leads to services which are adapted to the needs and objectives of various virtual communities. Furthermore, we discuss mechanisms of mutual economic and social dependence of tradable micro-services and the associated communities.},
  doi           = {10.1109/SASOW.2008.63},
  groups        = {Outra Area},
  keywords      = {Internet, telecommunication services, Web based services, business scenario, ecological perspective, service environments, tradable microservices, virtual community, Authentication, Business communication, Conferences, Convergence, Ecosystems, Environmental economics, Pricing, Probability distribution, Telecommunication services, Web and internet services, rank1},
}

@InProceedings{Gille2005,
  author        = {D. Gille},
  title         = {The Efficiency of Decreasing Payment Amounts in Mobile Commerce and Ubiquitous Computing},
  booktitle     = {Proc. Second IEEE Int. Workshop Mobile Commerce and Services},
  year          = {2005},
  pages         = {96--101},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {Personalised, location-related and differentiated services in the mobile digital economy create a demand for suitable pricing models. In the case of disaggregated "microservices" (e.g., small digitalized information or service units), as well as for the acquisition of low-value physical goods, the deployment of micropayments seems appropriate. This paper analyzes the economic efficiency of marginal transaction amounts in M-Commerce by applying the theoretical approach of transaction cost economics. For this purpose, a separation of technical and cognitive transaction costs is applied. The influence of selected determinants such as specifity, uncertainty and bounded rationality on transaction costs in mobile commerce micropayments is analyzed. The theoretical results imply a more likely application of micropayments for physical goods such as beverages or parking tickets than for digital goods and services. In addition, indicators for a significant above-zero lower limit of transaction amounts in mobile commerce are presented},
  doi           = {10.1109/WMCS.2005.26},
  groups        = {IoT},
  keywords      = {electronic commerce, microeconomics, mobile computing, M-Commerce, cognitive transaction costs, differentiated services, location-related services, low-value physical goods, micropayments, microservices, mobile commerce, mobile digital economy, personalised services, pricing models, technical transaction costs, transaction cost economics, ubiquitous computing, Business, Computer science, Costs, Data security, Economic forecasting, Mobile computing, Pricing, Telematics, Ubiquitous computing, Uncertainty, rank1},
}

@InProceedings{Zhang2016,
  author        = {H. Zhang and H. Ma and G. Fu and X. Yang and Z. Jiang and Y. Gao},
  title         = {Container Based Video Surveillance Cloud Service with Fine-Grained Resource Provisioning},
  booktitle     = {Proc. IEEE 9th Int. Conf. Cloud Computing (CLOUD)},
  year          = {2016},
  pages         = {758--765},
  month         = jun,
  __markedentry = {[romulo:6]},
  abstract      = {Many current video surveillance cloud platforms are built based on Virtual Machine (VM) technology that usually induces the loss of service performance and brings some challenges in the service management agility. In addition, the efficient resource provisioning for the heterogeneous video services is also a challenging issue in such a dynamic and shared cloud environment. In this paper, we firstly design a novel video surveillance cloud platform that employs the lightweight container technology and is defined according to the ITU standards. Our platform can provide a flexible and reconfigurable video microservice management environment with the high service capacity. Secondly, we propose a predictive fine-grained resource provisioning approach that can periodically predict the future workload and perform the proactive resource supply for the video microservices in the cloud. Our approach utilizes the service similarity matching and the time-series nearest neighbor regression to efficiently predict the future resource requirements, and dynamically optimizes the usage of resources based on predictive results while ensuring quality of service. Finally, we implement the proposed platform, and conduct the extensive experiments. The experimental results indicate that the proposed solution provides the higher service deployment density, accurately predicts the resource demands and significantly improves the resource utilization.},
  doi           = {10.1109/CLOUD.2016.0105},
  groups        = {Experiencia, Cloud},
  keywords      = {Cloud computing, Containers, Customer relationship management, Engines, Resource management, Streaming media, Video surveillance, container, resource prediction, resource provisioning, video surveillance, rank2},
}

@InProceedings{Ahmadvand2016,
  author        = {M. Ahmadvand and A. Ibrahim},
  title         = {Requirements Reconciliation for Scalable and Secure Microservice (De)composition},
  booktitle     = {Proc. IEEE 24th Int. Requirements Engineering Conf. Workshops (REW)},
  year          = {2016},
  pages         = {68--73},
  month         = sep,
  __markedentry = {[romulo:6]},
  abstract      = {Traditional monolithic services fail to scale efficiently when a certain task within the service is flooded. They also have a long software release cycle due to the system complexity. Microservices, as a new architectural style, are built upon the idea of breaking a large service into a set of single-responsibility (along with other properties) services that are communicating over network. In such a setting, services can scale more efficiently and release cycles become shorter thanks to the continuous deployment. Also, breaking a system into microservices is a daunting task. Normally, such design decisions are made by developers or architects with some intuitions. We argue that this approach only captures the interest of a narrowed set of stakeholders and thus fails to account system-wide requirements. In this work, we propose a conceptual methodology using which security and scalability requirements are incorporated in decomposing system into microservices. Using this methodology, requirements engineers can mindfully reconcile security and scalability requirements. This initiates architectural decisions (i.e. system decomposition) at requirements engineering phase and hence expands the system architects' view. We also examine our methodology by applying it to a fictional case study.},
  doi           = {10.1109/REW.2016.026},
  groups        = {Seguranca},
  keywords      = {Authorization, Business, Conferences, Scalability, Service-oriented architecture, Software systems, Microservice, Requirements Engineering, Requirements Reconciliation, Security, rank4},
}

@Article{Villari2016,
  author        = {M. Villari and M. Fazio and S. Dustdar and O. Rana and R. Ranjan},
  title         = {Osmotic Computing: A New Paradigm for Edge/Cloud Integration},
  journal       = {IEEE Cloud Computing},
  year          = {2016},
  volume        = {3},
  number        = {6},
  pages         = {76--83},
  month         = nov,
  issn          = {2325-6095},
  __markedentry = {[romulo:6]},
  abstract      = {Osmotic computing is a new paradigm to support the efficient execution of Internet of Things (IoT) services and applications at the network edge. This paradigm is founded on the need for a holistic distributed system abstraction enabling the deployment of lightweight microservices on resource-constrained IoT platforms at the network edge, coupled with more complex microservices running on large-scale datacenters. This paradigm is driven by the significant increase in resource capacity/capability at the network edge, along with support for data transfer protocols that enable such resources to interact more seamlessly with datacenter-based services. This installment of "Blue Skies" discusses osmotic computing features, challenges, and future directions.},
  doi           = {10.1109/MCC.2016.124},
  groups        = {IoT},
  keywords      = {Internet of Things, cloud computing, computer centres, electronic data interchange, Blue Skies, Internet of Things services, IoT services, data transfer protocols, datacenter-based services, distributed system abstraction, edge-cloud integration, large-scale datacenters, lightweight microservice deployment, network edge, osmotic computing, resource-constrained IoT platforms, edge cloud integration, edge computing, rank3},
}

@InProceedings{Alshuqayran2016,
  author        = {N. Alshuqayran and N. Ali and R. Evans},
  title         = {A Systematic Mapping Study in Microservice Architecture},
  booktitle     = {Proc. IEEE 9th Int. Conf. Service-Oriented Computing and Applications (SOCA)},
  year          = {2016},
  pages         = {44--51},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users' machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study focuses on identifying architectural challenges, the architectural diagrams/views and quality attributes related to microsevice systems.},
  doi           = {10.1109/SOCA.2016.15},
  groups        = {Survey},
  keywords      = {Business, Computer architecture, Conferences, Security, Service-oriented architecture, Systematics, rank3},
}

@InProceedings{Masek2016,
  author        = {P. Masek and M. Thulin and H. Andrade and C. Berger and O. Benderius},
  title         = {Systematic evaluation of sandboxed software deployment for real-time software on the example of a self-driving heavy vehicle},
  booktitle     = {Proc. IEEE 19th Int. Conf. Intelligent Transportation Systems (ITSC)},
  year          = {2016},
  pages         = {2398--2403},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {Companies developing and maintaining software-only products like web shops aim for establishing persistent links to their software running in the field. Monitoring data from real usage scenarios allows for a number of improvements in the software life-cycle, such as quick identification and solution of issues, and elicitation of requirements from previously unexpected usage. While the processes of continuous integration, continuous deployment, and continuous experimentation using sandboxing technologies are becoming well established in said software-only products, adopting similar practices for the automotive domain is more complex mainly due to real-time and safety constraints. In this paper, we systematically evaluate sandboxed software deployment in the context of a self-driving heavy vehicle that participated in the 2016 Grand Cooperative Driving Challenge (GCDC) in The Netherlands. We measured the system's scheduling precision after deploying applications in four different execution environments. Our results indicate that there is no significant difference in performance and overhead when sandboxed environments are used compared to natively deployed software. Thus, recent trends in software architecting, packaging, and maintenance using microservices encapsulated in sandboxes will help to realize similar software and system engineering for cyber-physical systems.},
  doi           = {10.1109/ITSC.2016.7795942},
  groups        = {Experiencia},
  keywords      = {intelligent transportation systems, product life cycle management, real-time systems, road vehicles, security of data, software maintenance, systems engineering, continuous deployment, continuous experimentation, continuous integration, cyber-physical systems, data monitoring, real-time software, sandboxed software deployment evaluation, self-driving heavy vehicle, software engineering, software life-cycle, software-only product development, software-only product maintenance, system engineering, Companies, Containers, Kernel, Linux, Real-time systems, Vehicles, rank1},
}

@InProceedings{Xavier2016,
  author        = {B. Xavier and T. Ferreto and L. Jersak},
  title         = {Time Provisioning Evaluation of KVM, Docker and Unikernels in a Cloud Platform},
  booktitle     = {Proc. Cloud and Grid Computing (CCGrid) 2016 16th IEEE/ACM Int. Symp. Cluster},
  year          = {2016},
  pages         = {277--280},
  month         = may,
  __markedentry = {[romulo:6]},
  abstract      = {Unikernels are a promising alternative for application deployment in cloud platforms. They comprise a very small footprint, providing better deployment agility and portability among virtualization platforms. Similar to Linux containers, they are a lightweight alternative for deploying distributed applications based on microservices. However, the comparison of unikernels with other virtualization options regarding the concurrent provisioning of instances, as in the case of microservices-based applications, is still lacking. This paper provides an evaluation of KVM (Virtual Machines), Docker (Containers), and OSv (Unikernel), when provisioning multiple instances concurrently in an OpenStack cloud platform. We confirmed that OSv outperforms the other options and also identified opportunities for optimization.},
  doi           = {10.1109/CCGrid.2016.86},
  groups        = {Deploy, Cloud, Ferramenta},
  keywords      = {cloud computing, public domain software, virtual machines, virtualisation, KVM, OSv, OpenStack cloud platform, application deployment, cloud Platform, concurrent multiple instance provisioning, containers, distributed applications, docker, kernel-based virtual machine, microservice-based applications, time provisioning evaluation, unikernels, virtualization platforms, Cloud computing, Containers, Linux, Operating systems, Virtual machine monitors, Virtual machining, Virtualization, hypervisor, linux containers, rank5},
}

@InProceedings{Nikol2016,
  author        = {G. Nikol and M. Träger and S. Harrer and G. Wirtz},
  title         = {Service-Oriented Multi-tenancy (SO-MT): Enabling Multi-tenancy for Existing Service Composition Engines with Docker},
  booktitle     = {Proc. IEEE Symp. Service-Oriented System Engineering (SOSE)},
  year          = {2016},
  pages         = {238--243},
  month         = mar,
  __markedentry = {[romulo:6]},
  abstract      = {In Web Services-based SOAs, BPEL 2.0 is the choice for defining services by composing existing ones. BPEL-based services can be directly executed on BPEL engines. With the rise of the cloud, companies aim to outsource service hosting to cloud providers. To achieve economies of scale, a cloud provider must host such services with minimal resources and keep the services from different tenants isolated. But BPEL engines typically do not support multi-tenancy. As a result, a vendor either has to extend the engine himself or host every service on its own (virtual) machine, thereby using either costly development or computing resources. Our approach solves this problem by hosting each service in its own isolated and minimal container which exposes the management functionality through APIs enabling complex multi-tenancy features or horizontal scaling on top. We aim to implement this by a) leveraging Docker container to isolate the services from each other, b) removing unused software from the container, c) starting the BPEL engine with minimal resources, and d) extracting management functionality while keeping management APIs. Our case study with Apache ODE shows that we can save significant runtime resources with only minor development effort. While this approach helps in moving SOAs into the cloud, it can also be leveraged to build resource efficient BPEL-based microservices cheaper.},
  doi           = {10.1109/SOSE.2016.40},
  groups        = {Deploy, Ferramenta},
  keywords      = {Web Services Business Process Execution Language, Web services, cloud computing, service-oriented architecture, virtual machines, Apache ODE, BPEL 2.0, BPEL engines, BPEL-based services, Business Process Execution Language, Docker container, SO-MT, Web services-based SOA, cloud providers, computing resources, economies of scale, management functionality, runtime resources, service composition engines, service-oriented multitenancy, virtual machine, Cloud computing, Containers, Engines, Java, Linux, Runtime, Docker, container, isolation, multi-tenancy, rank4},
}

@Article{Thuerk2016,
  author        = {F. Thürk and S. Kampusch and E. Kaniusas},
  title         = {Management Framework for Biosignals in Biomedical Studies: From Study Design to Data Statistics},
  journal       = {IEEE Transactions on Instrumentation and Measurement},
  year          = {2016},
  volume        = {65},
  number        = {4},
  pages         = {776--782},
  month         = apr,
  issn          = {0018-9456},
  __markedentry = {[romulo:6]},
  abstract      = {A centralized and structured management framework for biosignals is proposed. This framework is dedicated to design biomedical studies, acquire and store biosignals and the associated metadata, as well as validate, synchronize, view, and evaluate these signals from an individual study-related perspective. We introduce a five-layer model as the basis of the framework to facilitate data management, which includes the acquisition, validation, postprocessing, and statistics layers, as well as the vertical presentation layer. The strategic interaction between external data (i.e., metadata) and internal data (i.e., recorded biosignals) is defined to favor high-quality results and sustainability of recorded data. For the first time, a systematic software solution was designed to mimic the proposed layer model and to reasonably combine internal and external data management using microservices within a private cloud. Researchers can individually access and manipulate all data using a client implementation or a Web browser in order to address research-related questions, whereas developers can easily implement modular functions and algorithms. A simplified implementation of the proposed framework shows its strong potential in the unification and structuring of biomedical studies as well as in the associated acquisition, storage, and analysis of biosignals.},
  doi           = {10.1109/TIM.2015.2490858},
  groups        = {Experiencia, Outra Area},
  keywords      = {cloud computing, medical signal detection, medical signal processing, meta data, online front-ends, statistics, Web browser, acquisition, biomedical biosignal analysis, centralized-structured management framework, client implementation, data management, data statistics, five-layer model, metadata, modular functions, private cloud, proposed layer model, research-related questions, systematic software solution, vertical presentation layer, Biological system modeling, Biomedical measurement, Data models, Electrocardiography, Physiology, Prototypes, Sensors, biomedical studies, biosignals, data analysis, data management., rank4},
}

@InProceedings{Mouy2015,
  author        = {X. Mouy and P. A. Mouy and D. Hannay and T. Dakin},
  title         = {JMesh -- A Scalable Web-Based Platform for Visualization and Mining of Passive Acoustic Data},
  booktitle     = {Proc. IEEE Int. Conf. Data Mining Workshop (ICDMW)},
  year          = {2015},
  pages         = {773--779},
  month         = nov,
  __markedentry = {[romulo:6]},
  abstract      = {Visual presentation of the outputs from marine mammal detectors is key for efficient mining of large acoustic datasets. Operators must be able to easily navigate through large time series of detections, examine spectrograms, listen to detected sounds, and validate and compare detections for different species over time and space. The JMesh web platform has been designed with these constraints in mind. The interface is organized around three interconnected visualization panels: 1) a geographic interface displays maps showing the total number of detections for each species at all monitoring locations within an adjustable time period, 2) a detection time series plot displays temporal variations of detections for several species at a selected monitoring location, and 3) a multimedia panel allows the user to visualize spectrograms, listen to sounds and validate detections. All three panels are interactive and allow the user to navigate intuitively between them. The platform uses load balancing, microservices orchestration, shared non-relational databases, and virtualization technologies to make the infrastructure fully scalable and expandable from a single server to a resource farm composed of hundreds of hosts. JMesh can display detections from archived data or from real-time acquisition systems. Compatibility with mobile devices through the Bootstrap framework simplifies access to the data while in the field.},
  doi           = {10.1109/ICDMW.2015.193},
  groups        = {Experiencia, Outra Area},
  keywords      = {Internet, data mining, data visualisation, multimedia computing, real-time systems, statistical analysis, time series, JMesh Web platform, bootstrap framework, data visualization, marine mammal detectors, multimedia panel, passive acoustic data, real-time acquisition systems, scalable Web-based platform, spectrograms, visual presentation, Acoustics, Data visualization, Detectors, Load management, Real-time systems, Servers, Spectrogram, Interactive visualization, automatic detection and classification, passive acoustic monitoring, scalability, rank4},
}

@InProceedings{Le2015,
  author        = {V. D. Le and M. M. Neff and R. V. Stewart and R. Kelley and E. Fritzinger and S. M. Dascalu and F. C. Harris},
  title         = {Microservice-based architecture for the NRDC},
  booktitle     = {Proc. IEEE 13th Int. Conf. Industrial Informatics (INDIN)},
  year          = {2015},
  pages         = {1659--1664},
  month         = jul,
  __markedentry = {[romulo:6]},
  abstract      = {The NSF EPSCOR funded Solar Nexus Project is a collaborative effort between scientists, engineers, educators, and technicians to increase the amount of renewable solar energy in Nevada while eliminating its adverse effects on the surrounding environment and wildlife, and minimizing water consumption. The project seeks to research multiple areas, including water usage at power plants, the effect of power plant construction on the surrounding ecology, alternative wastewater methods to maintain solar panels, and interdisciplinary solutions to improve solar energy in Nevada. In order to organize and analyze this data to produce effective change, Nexus needs a centralized database to store collected data. To this end the Nevada Research Data Center is designed to collect, format, and store data for scientists to view and consider. This paper presents a new architecture solution for the NRDC. Based in microservices, the solution aims to ensure scalability, reliability, and maintainability of this data center. Background on NRDC is provided in the paper, together with details on the proposed solution's software specification, design, and prototype implementation. A discussion of the microservice-based architecture's benefits and an outline of planned directions of future work are also included.},
  doi           = {10.1109/INDIN.2015.7281983},
  groups        = {Outra Area, Experiencia},
  issn          = {1935-4576},
  keywords      = {computer centres, ecology, maintenance engineering, power system reliability, solar cell arrays, solar power, solar power stations, wastewater treatment, NRDC, NSF EPSCOR funded solar nexus project, Nevada research data center maintainability, alternative wastewater method, data center reliability, microservice-based architecture, renewable solar energy, solar panel, solar power plant, water consumption minimization, Computer architecture, Computer languages, Databases, Graphical user interfaces, Prototypes, Servers, Software, Design, Microservice Architecture, Monolithic Architecture, Prototype Implementation, Software Specifications, rank5},
}

@InProceedings{Rahman2015a,
  author        = {M. Rahman and Z. Chen and J. Gao},
  title         = {A Service Framework for Parallel Test Execution on a Developer's Local Development Workstation},
  booktitle     = {Proc. IEEE Symp. Service-Oriented System Engineering},
  year          = {2015},
  pages         = {153--160},
  month         = mar,
  __markedentry = {[romulo:6]},
  abstract      = {The proliferation of distributed microservices driven by service oriented architecture and the effectiveness of agile software development processes such as Test Driven Development (TDD), Behavior Driven Development (BDD), inspired by extreme programming (XP), have driven the challenging necessity to receive prompt test feedback during software development iteratively. Although few test frameworks can execute unit tests in memory in parallel, no existing test frameworks can reliably perform parallel execution for the tests that rely on file system access, database fixtures and network communication. Isolated test execution environment with dedicated resources is a prerequisite to address these challenges. No previous research addresses this need to run groups of tests in parallel on the same development host. In this paper, to cut down test execution time, we present a service framework for parallel tests execution in a developer's containerized sandbox using operating system level virtualization provided by Docker, the new hot driver for Platform as a Service (PaaS).},
  doi           = {10.1109/SOSE.2015.45},
  groups        = {Linguagem},
  keywords      = {operating systems (computers), parallel processing, program testing, virtualisation, Docker, PaaS, Platform as a Service, developers containerized sandbox, developers local development workstation, operating system level virtualization, parallel test execution, service framework, test execution time, Containers, Databases, File systems, Generators, Testing, Workstations, parallel testing, cloud testing, test execution environment, agile development, rank1},
}

@InProceedings{Ward2009,
  author        = {J. H. Ward and A. d. Torcy and M. Chua and J. Crabtree},
  title         = {Extracting and Ingesting DDI Metadata and Digital Objects from a Data Archive into the iRODS Extension of the NARA TPAP Using the OAI-PMH},
  booktitle     = {Proc. Fifth IEEE Int. Conf. e-Science},
  year          = {2009},
  pages         = {185--192},
  month         = dec,
  __markedentry = {[romulo:6]},
  abstract      = {This prototype demonstrated that the migration of collections between digital libraries and preservation data archives is now possible using automated batch load for both data and metadata. We used this capability to enable collection interoperability between the H.W. Odum Institute for Research in Social Science (Odum) data archive and the integrated rule oriented data system (iRODS) extension of the National Archives and Record Administration's (NARA) Transcontinental Persistent Archive Prototype (TPAP). We extracted data and metadata from a dataverse data archive and ingested it into the iRODS server and metadata catalog using the OAI-PMH, Java, XML/XSL and iRODS rules and microservices. We validated ingest of the files and retained the required terms \& conditions for the social science data after ingest.},
  doi           = {10.1109/e-Science.2009.34},
  keywords      = {cataloguing, digital libraries, information retrieval systems, meta data, open systems, DDI metadata, Dataverse data archive, H.W. Odum Institute for Research in Social Science Data Archive, Java, NARA TPAP, National Archives and Record Administration, OAI-PMH, Transcontinental Persistent Archive Prototype, XML-XSL, collection interoperability, digital objects, iRODS extension, iRODS server, integrated rule oriented data system, metadata catalog, open archives initiative protocol, social science data, Access protocols, Collaboration, Collaborative software, Data mining, Data systems, Prototypes, Software libraries, Standards development, XML, DDI, DVN, NARA, TPAP, data archive, digital library, digital preservation, grid computing, iRODS, interoperability, metadata, persistent archives, rank1},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 ExplicitGroup:Linguagem\;0\;;
1 ExplicitGroup:Teste\;0\;;
1 ExplicitGroup:Survey\;0\;;
1 ExplicitGroup:Outra Area\;0\;;
1 ExplicitGroup:IoT\;0\;;
1 ExplicitGroup:Seguranca\;0\;;
1 ExplicitGroup:Discovery\;0\;;
1 ExplicitGroup:Cloud\;0\;;
1 ExplicitGroup:Experiencia\;0\;;
1 ExplicitGroup:Deploy\;0\;;
1 ExplicitGroup:Framework\;0\;;
1 ExplicitGroup:Comunicacao\;0\;;
1 ExplicitGroup:Ferramenta\;0\;;
1 ExplicitGroup:DevOps\;0\;;
1 ExplicitGroup:Performance\;0\;;
1 ExplicitGroup:Desenvolvimento\;0\;;
1 ExplicitGroup:Database\;0\;;
}
